/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq;


import javax.annotation.processing.Generated;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import ru.tito.jooq.tables.ActGeBytearray;
import ru.tito.jooq.tables.ActGeProperty;
import ru.tito.jooq.tables.ActGeSchemaLog;
import ru.tito.jooq.tables.ActHiActinst;
import ru.tito.jooq.tables.ActHiAttachment;
import ru.tito.jooq.tables.ActHiBatch;
import ru.tito.jooq.tables.ActHiCaseactinst;
import ru.tito.jooq.tables.ActHiCaseinst;
import ru.tito.jooq.tables.ActHiComment;
import ru.tito.jooq.tables.ActHiDecIn;
import ru.tito.jooq.tables.ActHiDecOut;
import ru.tito.jooq.tables.ActHiDecinst;
import ru.tito.jooq.tables.ActHiDetail;
import ru.tito.jooq.tables.ActHiExtTaskLog;
import ru.tito.jooq.tables.ActHiIdentitylink;
import ru.tito.jooq.tables.ActHiIncident;
import ru.tito.jooq.tables.ActHiJobLog;
import ru.tito.jooq.tables.ActHiOpLog;
import ru.tito.jooq.tables.ActHiProcinst;
import ru.tito.jooq.tables.ActHiTaskinst;
import ru.tito.jooq.tables.ActHiVarinst;
import ru.tito.jooq.tables.ActIdGroup;
import ru.tito.jooq.tables.ActIdInfo;
import ru.tito.jooq.tables.ActIdMembership;
import ru.tito.jooq.tables.ActIdTenant;
import ru.tito.jooq.tables.ActIdTenantMember;
import ru.tito.jooq.tables.ActIdUser;
import ru.tito.jooq.tables.ActReCamformdef;
import ru.tito.jooq.tables.ActReCaseDef;
import ru.tito.jooq.tables.ActReDecisionDef;
import ru.tito.jooq.tables.ActReDecisionReqDef;
import ru.tito.jooq.tables.ActReDeployment;
import ru.tito.jooq.tables.ActReProcdef;
import ru.tito.jooq.tables.ActRuAuthorization;
import ru.tito.jooq.tables.ActRuBatch;
import ru.tito.jooq.tables.ActRuCaseExecution;
import ru.tito.jooq.tables.ActRuCaseSentryPart;
import ru.tito.jooq.tables.ActRuEventSubscr;
import ru.tito.jooq.tables.ActRuExecution;
import ru.tito.jooq.tables.ActRuExtTask;
import ru.tito.jooq.tables.ActRuFilter;
import ru.tito.jooq.tables.ActRuIdentitylink;
import ru.tito.jooq.tables.ActRuIncident;
import ru.tito.jooq.tables.ActRuJob;
import ru.tito.jooq.tables.ActRuJobdef;
import ru.tito.jooq.tables.ActRuMeterLog;
import ru.tito.jooq.tables.ActRuTask;
import ru.tito.jooq.tables.ActRuTaskMeterLog;
import ru.tito.jooq.tables.ActRuVariable;
import ru.tito.jooq.tables.FlywaySchemaHistory;
import ru.tito.jooq.tables.Grey;
import ru.tito.jooq.tables.Why;
import ru.tito.jooq.tables.records.ActGeBytearrayRecord;
import ru.tito.jooq.tables.records.ActGePropertyRecord;
import ru.tito.jooq.tables.records.ActGeSchemaLogRecord;
import ru.tito.jooq.tables.records.ActHiActinstRecord;
import ru.tito.jooq.tables.records.ActHiAttachmentRecord;
import ru.tito.jooq.tables.records.ActHiBatchRecord;
import ru.tito.jooq.tables.records.ActHiCaseactinstRecord;
import ru.tito.jooq.tables.records.ActHiCaseinstRecord;
import ru.tito.jooq.tables.records.ActHiCommentRecord;
import ru.tito.jooq.tables.records.ActHiDecInRecord;
import ru.tito.jooq.tables.records.ActHiDecOutRecord;
import ru.tito.jooq.tables.records.ActHiDecinstRecord;
import ru.tito.jooq.tables.records.ActHiDetailRecord;
import ru.tito.jooq.tables.records.ActHiExtTaskLogRecord;
import ru.tito.jooq.tables.records.ActHiIdentitylinkRecord;
import ru.tito.jooq.tables.records.ActHiIncidentRecord;
import ru.tito.jooq.tables.records.ActHiJobLogRecord;
import ru.tito.jooq.tables.records.ActHiOpLogRecord;
import ru.tito.jooq.tables.records.ActHiProcinstRecord;
import ru.tito.jooq.tables.records.ActHiTaskinstRecord;
import ru.tito.jooq.tables.records.ActHiVarinstRecord;
import ru.tito.jooq.tables.records.ActIdGroupRecord;
import ru.tito.jooq.tables.records.ActIdInfoRecord;
import ru.tito.jooq.tables.records.ActIdMembershipRecord;
import ru.tito.jooq.tables.records.ActIdTenantMemberRecord;
import ru.tito.jooq.tables.records.ActIdTenantRecord;
import ru.tito.jooq.tables.records.ActIdUserRecord;
import ru.tito.jooq.tables.records.ActReCamformdefRecord;
import ru.tito.jooq.tables.records.ActReCaseDefRecord;
import ru.tito.jooq.tables.records.ActReDecisionDefRecord;
import ru.tito.jooq.tables.records.ActReDecisionReqDefRecord;
import ru.tito.jooq.tables.records.ActReDeploymentRecord;
import ru.tito.jooq.tables.records.ActReProcdefRecord;
import ru.tito.jooq.tables.records.ActRuAuthorizationRecord;
import ru.tito.jooq.tables.records.ActRuBatchRecord;
import ru.tito.jooq.tables.records.ActRuCaseExecutionRecord;
import ru.tito.jooq.tables.records.ActRuCaseSentryPartRecord;
import ru.tito.jooq.tables.records.ActRuEventSubscrRecord;
import ru.tito.jooq.tables.records.ActRuExecutionRecord;
import ru.tito.jooq.tables.records.ActRuExtTaskRecord;
import ru.tito.jooq.tables.records.ActRuFilterRecord;
import ru.tito.jooq.tables.records.ActRuIdentitylinkRecord;
import ru.tito.jooq.tables.records.ActRuIncidentRecord;
import ru.tito.jooq.tables.records.ActRuJobRecord;
import ru.tito.jooq.tables.records.ActRuJobdefRecord;
import ru.tito.jooq.tables.records.ActRuMeterLogRecord;
import ru.tito.jooq.tables.records.ActRuTaskMeterLogRecord;
import ru.tito.jooq.tables.records.ActRuTaskRecord;
import ru.tito.jooq.tables.records.ActRuVariableRecord;
import ru.tito.jooq.tables.records.FlywaySchemaHistoryRecord;
import ru.tito.jooq.tables.records.GreyRecord;
import ru.tito.jooq.tables.records.WhyRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * greygold.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ActGeBytearrayRecord> ACT_GE_BYTEARRAY_PKEY = Internal.createUniqueKey(ActGeBytearray.ACT_GE_BYTEARRAY, DSL.name("act_ge_bytearray_pkey"), new TableField[] { ActGeBytearray.ACT_GE_BYTEARRAY.ID_ }, true);
    public static final UniqueKey<ActGePropertyRecord> ACT_GE_PROPERTY_PKEY = Internal.createUniqueKey(ActGeProperty.ACT_GE_PROPERTY, DSL.name("act_ge_property_pkey"), new TableField[] { ActGeProperty.ACT_GE_PROPERTY.NAME_ }, true);
    public static final UniqueKey<ActGeSchemaLogRecord> ACT_GE_SCHEMA_LOG_PKEY = Internal.createUniqueKey(ActGeSchemaLog.ACT_GE_SCHEMA_LOG, DSL.name("act_ge_schema_log_pkey"), new TableField[] { ActGeSchemaLog.ACT_GE_SCHEMA_LOG.ID_ }, true);
    public static final UniqueKey<ActHiActinstRecord> ACT_HI_ACTINST_PKEY = Internal.createUniqueKey(ActHiActinst.ACT_HI_ACTINST, DSL.name("act_hi_actinst_pkey"), new TableField[] { ActHiActinst.ACT_HI_ACTINST.ID_ }, true);
    public static final UniqueKey<ActHiAttachmentRecord> ACT_HI_ATTACHMENT_PKEY = Internal.createUniqueKey(ActHiAttachment.ACT_HI_ATTACHMENT, DSL.name("act_hi_attachment_pkey"), new TableField[] { ActHiAttachment.ACT_HI_ATTACHMENT.ID_ }, true);
    public static final UniqueKey<ActHiBatchRecord> ACT_HI_BATCH_PKEY = Internal.createUniqueKey(ActHiBatch.ACT_HI_BATCH, DSL.name("act_hi_batch_pkey"), new TableField[] { ActHiBatch.ACT_HI_BATCH.ID_ }, true);
    public static final UniqueKey<ActHiCaseactinstRecord> ACT_HI_CASEACTINST_PKEY = Internal.createUniqueKey(ActHiCaseactinst.ACT_HI_CASEACTINST, DSL.name("act_hi_caseactinst_pkey"), new TableField[] { ActHiCaseactinst.ACT_HI_CASEACTINST.ID_ }, true);
    public static final UniqueKey<ActHiCaseinstRecord> ACT_HI_CASEINST_CASE_INST_ID__KEY = Internal.createUniqueKey(ActHiCaseinst.ACT_HI_CASEINST, DSL.name("act_hi_caseinst_case_inst_id__key"), new TableField[] { ActHiCaseinst.ACT_HI_CASEINST.CASE_INST_ID_ }, true);
    public static final UniqueKey<ActHiCaseinstRecord> ACT_HI_CASEINST_PKEY = Internal.createUniqueKey(ActHiCaseinst.ACT_HI_CASEINST, DSL.name("act_hi_caseinst_pkey"), new TableField[] { ActHiCaseinst.ACT_HI_CASEINST.ID_ }, true);
    public static final UniqueKey<ActHiCommentRecord> ACT_HI_COMMENT_PKEY = Internal.createUniqueKey(ActHiComment.ACT_HI_COMMENT, DSL.name("act_hi_comment_pkey"), new TableField[] { ActHiComment.ACT_HI_COMMENT.ID_ }, true);
    public static final UniqueKey<ActHiDecInRecord> ACT_HI_DEC_IN_PKEY = Internal.createUniqueKey(ActHiDecIn.ACT_HI_DEC_IN, DSL.name("act_hi_dec_in_pkey"), new TableField[] { ActHiDecIn.ACT_HI_DEC_IN.ID_ }, true);
    public static final UniqueKey<ActHiDecOutRecord> ACT_HI_DEC_OUT_PKEY = Internal.createUniqueKey(ActHiDecOut.ACT_HI_DEC_OUT, DSL.name("act_hi_dec_out_pkey"), new TableField[] { ActHiDecOut.ACT_HI_DEC_OUT.ID_ }, true);
    public static final UniqueKey<ActHiDecinstRecord> ACT_HI_DECINST_PKEY = Internal.createUniqueKey(ActHiDecinst.ACT_HI_DECINST, DSL.name("act_hi_decinst_pkey"), new TableField[] { ActHiDecinst.ACT_HI_DECINST.ID_ }, true);
    public static final UniqueKey<ActHiDetailRecord> ACT_HI_DETAIL_PKEY = Internal.createUniqueKey(ActHiDetail.ACT_HI_DETAIL, DSL.name("act_hi_detail_pkey"), new TableField[] { ActHiDetail.ACT_HI_DETAIL.ID_ }, true);
    public static final UniqueKey<ActHiExtTaskLogRecord> ACT_HI_EXT_TASK_LOG_PKEY = Internal.createUniqueKey(ActHiExtTaskLog.ACT_HI_EXT_TASK_LOG, DSL.name("act_hi_ext_task_log_pkey"), new TableField[] { ActHiExtTaskLog.ACT_HI_EXT_TASK_LOG.ID_ }, true);
    public static final UniqueKey<ActHiIdentitylinkRecord> ACT_HI_IDENTITYLINK_PKEY = Internal.createUniqueKey(ActHiIdentitylink.ACT_HI_IDENTITYLINK, DSL.name("act_hi_identitylink_pkey"), new TableField[] { ActHiIdentitylink.ACT_HI_IDENTITYLINK.ID_ }, true);
    public static final UniqueKey<ActHiIncidentRecord> ACT_HI_INCIDENT_PKEY = Internal.createUniqueKey(ActHiIncident.ACT_HI_INCIDENT, DSL.name("act_hi_incident_pkey"), new TableField[] { ActHiIncident.ACT_HI_INCIDENT.ID_ }, true);
    public static final UniqueKey<ActHiJobLogRecord> ACT_HI_JOB_LOG_PKEY = Internal.createUniqueKey(ActHiJobLog.ACT_HI_JOB_LOG, DSL.name("act_hi_job_log_pkey"), new TableField[] { ActHiJobLog.ACT_HI_JOB_LOG.ID_ }, true);
    public static final UniqueKey<ActHiOpLogRecord> ACT_HI_OP_LOG_PKEY = Internal.createUniqueKey(ActHiOpLog.ACT_HI_OP_LOG, DSL.name("act_hi_op_log_pkey"), new TableField[] { ActHiOpLog.ACT_HI_OP_LOG.ID_ }, true);
    public static final UniqueKey<ActHiProcinstRecord> ACT_HI_PROCINST_PKEY = Internal.createUniqueKey(ActHiProcinst.ACT_HI_PROCINST, DSL.name("act_hi_procinst_pkey"), new TableField[] { ActHiProcinst.ACT_HI_PROCINST.ID_ }, true);
    public static final UniqueKey<ActHiProcinstRecord> ACT_HI_PROCINST_PROC_INST_ID__KEY = Internal.createUniqueKey(ActHiProcinst.ACT_HI_PROCINST, DSL.name("act_hi_procinst_proc_inst_id__key"), new TableField[] { ActHiProcinst.ACT_HI_PROCINST.PROC_INST_ID_ }, true);
    public static final UniqueKey<ActHiTaskinstRecord> ACT_HI_TASKINST_PKEY = Internal.createUniqueKey(ActHiTaskinst.ACT_HI_TASKINST, DSL.name("act_hi_taskinst_pkey"), new TableField[] { ActHiTaskinst.ACT_HI_TASKINST.ID_ }, true);
    public static final UniqueKey<ActHiVarinstRecord> ACT_HI_VARINST_PKEY = Internal.createUniqueKey(ActHiVarinst.ACT_HI_VARINST, DSL.name("act_hi_varinst_pkey"), new TableField[] { ActHiVarinst.ACT_HI_VARINST.ID_ }, true);
    public static final UniqueKey<ActIdGroupRecord> ACT_ID_GROUP_PKEY = Internal.createUniqueKey(ActIdGroup.ACT_ID_GROUP, DSL.name("act_id_group_pkey"), new TableField[] { ActIdGroup.ACT_ID_GROUP.ID_ }, true);
    public static final UniqueKey<ActIdInfoRecord> ACT_ID_INFO_PKEY = Internal.createUniqueKey(ActIdInfo.ACT_ID_INFO, DSL.name("act_id_info_pkey"), new TableField[] { ActIdInfo.ACT_ID_INFO.ID_ }, true);
    public static final UniqueKey<ActIdMembershipRecord> ACT_ID_MEMBERSHIP_PKEY = Internal.createUniqueKey(ActIdMembership.ACT_ID_MEMBERSHIP, DSL.name("act_id_membership_pkey"), new TableField[] { ActIdMembership.ACT_ID_MEMBERSHIP.USER_ID_, ActIdMembership.ACT_ID_MEMBERSHIP.GROUP_ID_ }, true);
    public static final UniqueKey<ActIdTenantRecord> ACT_ID_TENANT_PKEY = Internal.createUniqueKey(ActIdTenant.ACT_ID_TENANT, DSL.name("act_id_tenant_pkey"), new TableField[] { ActIdTenant.ACT_ID_TENANT.ID_ }, true);
    public static final UniqueKey<ActIdTenantMemberRecord> ACT_ID_TENANT_MEMBER_PKEY = Internal.createUniqueKey(ActIdTenantMember.ACT_ID_TENANT_MEMBER, DSL.name("act_id_tenant_member_pkey"), new TableField[] { ActIdTenantMember.ACT_ID_TENANT_MEMBER.ID_ }, true);
    public static final UniqueKey<ActIdTenantMemberRecord> ACT_UNIQ_TENANT_MEMB_GROUP = Internal.createUniqueKey(ActIdTenantMember.ACT_ID_TENANT_MEMBER, DSL.name("act_uniq_tenant_memb_group"), new TableField[] { ActIdTenantMember.ACT_ID_TENANT_MEMBER.TENANT_ID_, ActIdTenantMember.ACT_ID_TENANT_MEMBER.GROUP_ID_ }, true);
    public static final UniqueKey<ActIdTenantMemberRecord> ACT_UNIQ_TENANT_MEMB_USER = Internal.createUniqueKey(ActIdTenantMember.ACT_ID_TENANT_MEMBER, DSL.name("act_uniq_tenant_memb_user"), new TableField[] { ActIdTenantMember.ACT_ID_TENANT_MEMBER.TENANT_ID_, ActIdTenantMember.ACT_ID_TENANT_MEMBER.USER_ID_ }, true);
    public static final UniqueKey<ActIdUserRecord> ACT_ID_USER_PKEY = Internal.createUniqueKey(ActIdUser.ACT_ID_USER, DSL.name("act_id_user_pkey"), new TableField[] { ActIdUser.ACT_ID_USER.ID_ }, true);
    public static final UniqueKey<ActReCamformdefRecord> ACT_RE_CAMFORMDEF_PKEY = Internal.createUniqueKey(ActReCamformdef.ACT_RE_CAMFORMDEF, DSL.name("act_re_camformdef_pkey"), new TableField[] { ActReCamformdef.ACT_RE_CAMFORMDEF.ID_ }, true);
    public static final UniqueKey<ActReCaseDefRecord> ACT_RE_CASE_DEF_PKEY = Internal.createUniqueKey(ActReCaseDef.ACT_RE_CASE_DEF, DSL.name("act_re_case_def_pkey"), new TableField[] { ActReCaseDef.ACT_RE_CASE_DEF.ID_ }, true);
    public static final UniqueKey<ActReDecisionDefRecord> ACT_RE_DECISION_DEF_PKEY = Internal.createUniqueKey(ActReDecisionDef.ACT_RE_DECISION_DEF, DSL.name("act_re_decision_def_pkey"), new TableField[] { ActReDecisionDef.ACT_RE_DECISION_DEF.ID_ }, true);
    public static final UniqueKey<ActReDecisionReqDefRecord> ACT_RE_DECISION_REQ_DEF_PKEY = Internal.createUniqueKey(ActReDecisionReqDef.ACT_RE_DECISION_REQ_DEF, DSL.name("act_re_decision_req_def_pkey"), new TableField[] { ActReDecisionReqDef.ACT_RE_DECISION_REQ_DEF.ID_ }, true);
    public static final UniqueKey<ActReDeploymentRecord> ACT_RE_DEPLOYMENT_PKEY = Internal.createUniqueKey(ActReDeployment.ACT_RE_DEPLOYMENT, DSL.name("act_re_deployment_pkey"), new TableField[] { ActReDeployment.ACT_RE_DEPLOYMENT.ID_ }, true);
    public static final UniqueKey<ActReProcdefRecord> ACT_RE_PROCDEF_PKEY = Internal.createUniqueKey(ActReProcdef.ACT_RE_PROCDEF, DSL.name("act_re_procdef_pkey"), new TableField[] { ActReProcdef.ACT_RE_PROCDEF.ID_ }, true);
    public static final UniqueKey<ActRuAuthorizationRecord> ACT_RU_AUTHORIZATION_PKEY = Internal.createUniqueKey(ActRuAuthorization.ACT_RU_AUTHORIZATION, DSL.name("act_ru_authorization_pkey"), new TableField[] { ActRuAuthorization.ACT_RU_AUTHORIZATION.ID_ }, true);
    public static final UniqueKey<ActRuAuthorizationRecord> ACT_UNIQ_AUTH_GROUP = Internal.createUniqueKey(ActRuAuthorization.ACT_RU_AUTHORIZATION, DSL.name("act_uniq_auth_group"), new TableField[] { ActRuAuthorization.ACT_RU_AUTHORIZATION.TYPE_, ActRuAuthorization.ACT_RU_AUTHORIZATION.GROUP_ID_, ActRuAuthorization.ACT_RU_AUTHORIZATION.RESOURCE_TYPE_, ActRuAuthorization.ACT_RU_AUTHORIZATION.RESOURCE_ID_ }, true);
    public static final UniqueKey<ActRuAuthorizationRecord> ACT_UNIQ_AUTH_USER = Internal.createUniqueKey(ActRuAuthorization.ACT_RU_AUTHORIZATION, DSL.name("act_uniq_auth_user"), new TableField[] { ActRuAuthorization.ACT_RU_AUTHORIZATION.TYPE_, ActRuAuthorization.ACT_RU_AUTHORIZATION.USER_ID_, ActRuAuthorization.ACT_RU_AUTHORIZATION.RESOURCE_TYPE_, ActRuAuthorization.ACT_RU_AUTHORIZATION.RESOURCE_ID_ }, true);
    public static final UniqueKey<ActRuBatchRecord> ACT_RU_BATCH_PKEY = Internal.createUniqueKey(ActRuBatch.ACT_RU_BATCH, DSL.name("act_ru_batch_pkey"), new TableField[] { ActRuBatch.ACT_RU_BATCH.ID_ }, true);
    public static final UniqueKey<ActRuCaseExecutionRecord> ACT_RU_CASE_EXECUTION_PKEY = Internal.createUniqueKey(ActRuCaseExecution.ACT_RU_CASE_EXECUTION, DSL.name("act_ru_case_execution_pkey"), new TableField[] { ActRuCaseExecution.ACT_RU_CASE_EXECUTION.ID_ }, true);
    public static final UniqueKey<ActRuCaseSentryPartRecord> ACT_RU_CASE_SENTRY_PART_PKEY = Internal.createUniqueKey(ActRuCaseSentryPart.ACT_RU_CASE_SENTRY_PART, DSL.name("act_ru_case_sentry_part_pkey"), new TableField[] { ActRuCaseSentryPart.ACT_RU_CASE_SENTRY_PART.ID_ }, true);
    public static final UniqueKey<ActRuEventSubscrRecord> ACT_RU_EVENT_SUBSCR_PKEY = Internal.createUniqueKey(ActRuEventSubscr.ACT_RU_EVENT_SUBSCR, DSL.name("act_ru_event_subscr_pkey"), new TableField[] { ActRuEventSubscr.ACT_RU_EVENT_SUBSCR.ID_ }, true);
    public static final UniqueKey<ActRuExecutionRecord> ACT_RU_EXECUTION_PKEY = Internal.createUniqueKey(ActRuExecution.ACT_RU_EXECUTION, DSL.name("act_ru_execution_pkey"), new TableField[] { ActRuExecution.ACT_RU_EXECUTION.ID_ }, true);
    public static final UniqueKey<ActRuExtTaskRecord> ACT_RU_EXT_TASK_PKEY = Internal.createUniqueKey(ActRuExtTask.ACT_RU_EXT_TASK, DSL.name("act_ru_ext_task_pkey"), new TableField[] { ActRuExtTask.ACT_RU_EXT_TASK.ID_ }, true);
    public static final UniqueKey<ActRuFilterRecord> ACT_RU_FILTER_PKEY = Internal.createUniqueKey(ActRuFilter.ACT_RU_FILTER, DSL.name("act_ru_filter_pkey"), new TableField[] { ActRuFilter.ACT_RU_FILTER.ID_ }, true);
    public static final UniqueKey<ActRuIdentitylinkRecord> ACT_RU_IDENTITYLINK_PKEY = Internal.createUniqueKey(ActRuIdentitylink.ACT_RU_IDENTITYLINK, DSL.name("act_ru_identitylink_pkey"), new TableField[] { ActRuIdentitylink.ACT_RU_IDENTITYLINK.ID_ }, true);
    public static final UniqueKey<ActRuIncidentRecord> ACT_RU_INCIDENT_PKEY = Internal.createUniqueKey(ActRuIncident.ACT_RU_INCIDENT, DSL.name("act_ru_incident_pkey"), new TableField[] { ActRuIncident.ACT_RU_INCIDENT.ID_ }, true);
    public static final UniqueKey<ActRuJobRecord> ACT_RU_JOB_PKEY = Internal.createUniqueKey(ActRuJob.ACT_RU_JOB, DSL.name("act_ru_job_pkey"), new TableField[] { ActRuJob.ACT_RU_JOB.ID_ }, true);
    public static final UniqueKey<ActRuJobdefRecord> ACT_RU_JOBDEF_PKEY = Internal.createUniqueKey(ActRuJobdef.ACT_RU_JOBDEF, DSL.name("act_ru_jobdef_pkey"), new TableField[] { ActRuJobdef.ACT_RU_JOBDEF.ID_ }, true);
    public static final UniqueKey<ActRuMeterLogRecord> ACT_RU_METER_LOG_PKEY = Internal.createUniqueKey(ActRuMeterLog.ACT_RU_METER_LOG, DSL.name("act_ru_meter_log_pkey"), new TableField[] { ActRuMeterLog.ACT_RU_METER_LOG.ID_ }, true);
    public static final UniqueKey<ActRuTaskRecord> ACT_RU_TASK_PKEY = Internal.createUniqueKey(ActRuTask.ACT_RU_TASK, DSL.name("act_ru_task_pkey"), new TableField[] { ActRuTask.ACT_RU_TASK.ID_ }, true);
    public static final UniqueKey<ActRuTaskMeterLogRecord> ACT_RU_TASK_METER_LOG_PKEY = Internal.createUniqueKey(ActRuTaskMeterLog.ACT_RU_TASK_METER_LOG, DSL.name("act_ru_task_meter_log_pkey"), new TableField[] { ActRuTaskMeterLog.ACT_RU_TASK_METER_LOG.ID_ }, true);
    public static final UniqueKey<ActRuVariableRecord> ACT_RU_VARIABLE_PKEY = Internal.createUniqueKey(ActRuVariable.ACT_RU_VARIABLE, DSL.name("act_ru_variable_pkey"), new TableField[] { ActRuVariable.ACT_RU_VARIABLE.ID_ }, true);
    public static final UniqueKey<ActRuVariableRecord> ACT_UNIQ_VARIABLE = Internal.createUniqueKey(ActRuVariable.ACT_RU_VARIABLE, DSL.name("act_uniq_variable"), new TableField[] { ActRuVariable.ACT_RU_VARIABLE.VAR_SCOPE_, ActRuVariable.ACT_RU_VARIABLE.NAME_ }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<GreyRecord> PR_KEY = Internal.createUniqueKey(Grey.GREY, DSL.name("pr_key"), new TableField[] { Grey.GREY.ID }, true);
    public static final UniqueKey<WhyRecord> WHY_PKEY = Internal.createUniqueKey(Why.WHY, DSL.name("why_pkey"), new TableField[] { Why.WHY.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ActGeBytearrayRecord, ActReDeploymentRecord> ACT_GE_BYTEARRAY__ACT_FK_BYTEARR_DEPL = Internal.createForeignKey(ActGeBytearray.ACT_GE_BYTEARRAY, DSL.name("act_fk_bytearr_depl"), new TableField[] { ActGeBytearray.ACT_GE_BYTEARRAY.DEPLOYMENT_ID_ }, Keys.ACT_RE_DEPLOYMENT_PKEY, new TableField[] { ActReDeployment.ACT_RE_DEPLOYMENT.ID_ }, true);
    public static final ForeignKey<ActIdMembershipRecord, ActIdGroupRecord> ACT_ID_MEMBERSHIP__ACT_FK_MEMB_GROUP = Internal.createForeignKey(ActIdMembership.ACT_ID_MEMBERSHIP, DSL.name("act_fk_memb_group"), new TableField[] { ActIdMembership.ACT_ID_MEMBERSHIP.GROUP_ID_ }, Keys.ACT_ID_GROUP_PKEY, new TableField[] { ActIdGroup.ACT_ID_GROUP.ID_ }, true);
    public static final ForeignKey<ActIdMembershipRecord, ActIdUserRecord> ACT_ID_MEMBERSHIP__ACT_FK_MEMB_USER = Internal.createForeignKey(ActIdMembership.ACT_ID_MEMBERSHIP, DSL.name("act_fk_memb_user"), new TableField[] { ActIdMembership.ACT_ID_MEMBERSHIP.USER_ID_ }, Keys.ACT_ID_USER_PKEY, new TableField[] { ActIdUser.ACT_ID_USER.ID_ }, true);
    public static final ForeignKey<ActIdTenantMemberRecord, ActIdTenantRecord> ACT_ID_TENANT_MEMBER__ACT_FK_TENANT_MEMB = Internal.createForeignKey(ActIdTenantMember.ACT_ID_TENANT_MEMBER, DSL.name("act_fk_tenant_memb"), new TableField[] { ActIdTenantMember.ACT_ID_TENANT_MEMBER.TENANT_ID_ }, Keys.ACT_ID_TENANT_PKEY, new TableField[] { ActIdTenant.ACT_ID_TENANT.ID_ }, true);
    public static final ForeignKey<ActIdTenantMemberRecord, ActIdGroupRecord> ACT_ID_TENANT_MEMBER__ACT_FK_TENANT_MEMB_GROUP = Internal.createForeignKey(ActIdTenantMember.ACT_ID_TENANT_MEMBER, DSL.name("act_fk_tenant_memb_group"), new TableField[] { ActIdTenantMember.ACT_ID_TENANT_MEMBER.GROUP_ID_ }, Keys.ACT_ID_GROUP_PKEY, new TableField[] { ActIdGroup.ACT_ID_GROUP.ID_ }, true);
    public static final ForeignKey<ActIdTenantMemberRecord, ActIdUserRecord> ACT_ID_TENANT_MEMBER__ACT_FK_TENANT_MEMB_USER = Internal.createForeignKey(ActIdTenantMember.ACT_ID_TENANT_MEMBER, DSL.name("act_fk_tenant_memb_user"), new TableField[] { ActIdTenantMember.ACT_ID_TENANT_MEMBER.USER_ID_ }, Keys.ACT_ID_USER_PKEY, new TableField[] { ActIdUser.ACT_ID_USER.ID_ }, true);
    public static final ForeignKey<ActReDecisionDefRecord, ActReDecisionReqDefRecord> ACT_RE_DECISION_DEF__ACT_FK_DEC_REQ = Internal.createForeignKey(ActReDecisionDef.ACT_RE_DECISION_DEF, DSL.name("act_fk_dec_req"), new TableField[] { ActReDecisionDef.ACT_RE_DECISION_DEF.DEC_REQ_ID_ }, Keys.ACT_RE_DECISION_REQ_DEF_PKEY, new TableField[] { ActReDecisionReqDef.ACT_RE_DECISION_REQ_DEF.ID_ }, true);
    public static final ForeignKey<ActRuBatchRecord, ActRuJobdefRecord> ACT_RU_BATCH__ACT_FK_BATCH_JOB_DEF = Internal.createForeignKey(ActRuBatch.ACT_RU_BATCH, DSL.name("act_fk_batch_job_def"), new TableField[] { ActRuBatch.ACT_RU_BATCH.BATCH_JOB_DEF_ID_ }, Keys.ACT_RU_JOBDEF_PKEY, new TableField[] { ActRuJobdef.ACT_RU_JOBDEF.ID_ }, true);
    public static final ForeignKey<ActRuBatchRecord, ActRuJobdefRecord> ACT_RU_BATCH__ACT_FK_BATCH_MONITOR_JOB_DEF = Internal.createForeignKey(ActRuBatch.ACT_RU_BATCH, DSL.name("act_fk_batch_monitor_job_def"), new TableField[] { ActRuBatch.ACT_RU_BATCH.MONITOR_JOB_DEF_ID_ }, Keys.ACT_RU_JOBDEF_PKEY, new TableField[] { ActRuJobdef.ACT_RU_JOBDEF.ID_ }, true);
    public static final ForeignKey<ActRuBatchRecord, ActRuJobdefRecord> ACT_RU_BATCH__ACT_FK_BATCH_SEED_JOB_DEF = Internal.createForeignKey(ActRuBatch.ACT_RU_BATCH, DSL.name("act_fk_batch_seed_job_def"), new TableField[] { ActRuBatch.ACT_RU_BATCH.SEED_JOB_DEF_ID_ }, Keys.ACT_RU_JOBDEF_PKEY, new TableField[] { ActRuJobdef.ACT_RU_JOBDEF.ID_ }, true);
    public static final ForeignKey<ActRuCaseExecutionRecord, ActReCaseDefRecord> ACT_RU_CASE_EXECUTION__ACT_FK_CASE_EXE_CASE_DEF = Internal.createForeignKey(ActRuCaseExecution.ACT_RU_CASE_EXECUTION, DSL.name("act_fk_case_exe_case_def"), new TableField[] { ActRuCaseExecution.ACT_RU_CASE_EXECUTION.CASE_DEF_ID_ }, Keys.ACT_RE_CASE_DEF_PKEY, new TableField[] { ActReCaseDef.ACT_RE_CASE_DEF.ID_ }, true);
    public static final ForeignKey<ActRuCaseExecutionRecord, ActRuCaseExecutionRecord> ACT_RU_CASE_EXECUTION__ACT_FK_CASE_EXE_CASE_INST = Internal.createForeignKey(ActRuCaseExecution.ACT_RU_CASE_EXECUTION, DSL.name("act_fk_case_exe_case_inst"), new TableField[] { ActRuCaseExecution.ACT_RU_CASE_EXECUTION.CASE_INST_ID_ }, Keys.ACT_RU_CASE_EXECUTION_PKEY, new TableField[] { ActRuCaseExecution.ACT_RU_CASE_EXECUTION.ID_ }, true);
    public static final ForeignKey<ActRuCaseExecutionRecord, ActRuCaseExecutionRecord> ACT_RU_CASE_EXECUTION__ACT_FK_CASE_EXE_PARENT = Internal.createForeignKey(ActRuCaseExecution.ACT_RU_CASE_EXECUTION, DSL.name("act_fk_case_exe_parent"), new TableField[] { ActRuCaseExecution.ACT_RU_CASE_EXECUTION.PARENT_ID_ }, Keys.ACT_RU_CASE_EXECUTION_PKEY, new TableField[] { ActRuCaseExecution.ACT_RU_CASE_EXECUTION.ID_ }, true);
    public static final ForeignKey<ActRuCaseSentryPartRecord, ActRuCaseExecutionRecord> ACT_RU_CASE_SENTRY_PART__ACT_FK_CASE_SENTRY_CASE_EXEC = Internal.createForeignKey(ActRuCaseSentryPart.ACT_RU_CASE_SENTRY_PART, DSL.name("act_fk_case_sentry_case_exec"), new TableField[] { ActRuCaseSentryPart.ACT_RU_CASE_SENTRY_PART.CASE_EXEC_ID_ }, Keys.ACT_RU_CASE_EXECUTION_PKEY, new TableField[] { ActRuCaseExecution.ACT_RU_CASE_EXECUTION.ID_ }, true);
    public static final ForeignKey<ActRuCaseSentryPartRecord, ActRuCaseExecutionRecord> ACT_RU_CASE_SENTRY_PART__ACT_FK_CASE_SENTRY_CASE_INST = Internal.createForeignKey(ActRuCaseSentryPart.ACT_RU_CASE_SENTRY_PART, DSL.name("act_fk_case_sentry_case_inst"), new TableField[] { ActRuCaseSentryPart.ACT_RU_CASE_SENTRY_PART.CASE_INST_ID_ }, Keys.ACT_RU_CASE_EXECUTION_PKEY, new TableField[] { ActRuCaseExecution.ACT_RU_CASE_EXECUTION.ID_ }, true);
    public static final ForeignKey<ActRuEventSubscrRecord, ActRuExecutionRecord> ACT_RU_EVENT_SUBSCR__ACT_FK_EVENT_EXEC = Internal.createForeignKey(ActRuEventSubscr.ACT_RU_EVENT_SUBSCR, DSL.name("act_fk_event_exec"), new TableField[] { ActRuEventSubscr.ACT_RU_EVENT_SUBSCR.EXECUTION_ID_ }, Keys.ACT_RU_EXECUTION_PKEY, new TableField[] { ActRuExecution.ACT_RU_EXECUTION.ID_ }, true);
    public static final ForeignKey<ActRuExecutionRecord, ActRuExecutionRecord> ACT_RU_EXECUTION__ACT_FK_EXE_PARENT = Internal.createForeignKey(ActRuExecution.ACT_RU_EXECUTION, DSL.name("act_fk_exe_parent"), new TableField[] { ActRuExecution.ACT_RU_EXECUTION.PARENT_ID_ }, Keys.ACT_RU_EXECUTION_PKEY, new TableField[] { ActRuExecution.ACT_RU_EXECUTION.ID_ }, true);
    public static final ForeignKey<ActRuExecutionRecord, ActReProcdefRecord> ACT_RU_EXECUTION__ACT_FK_EXE_PROCDEF = Internal.createForeignKey(ActRuExecution.ACT_RU_EXECUTION, DSL.name("act_fk_exe_procdef"), new TableField[] { ActRuExecution.ACT_RU_EXECUTION.PROC_DEF_ID_ }, Keys.ACT_RE_PROCDEF_PKEY, new TableField[] { ActReProcdef.ACT_RE_PROCDEF.ID_ }, true);
    public static final ForeignKey<ActRuExecutionRecord, ActRuExecutionRecord> ACT_RU_EXECUTION__ACT_FK_EXE_PROCINST = Internal.createForeignKey(ActRuExecution.ACT_RU_EXECUTION, DSL.name("act_fk_exe_procinst"), new TableField[] { ActRuExecution.ACT_RU_EXECUTION.PROC_INST_ID_ }, Keys.ACT_RU_EXECUTION_PKEY, new TableField[] { ActRuExecution.ACT_RU_EXECUTION.ID_ }, true);
    public static final ForeignKey<ActRuExecutionRecord, ActRuExecutionRecord> ACT_RU_EXECUTION__ACT_FK_EXE_SUPER = Internal.createForeignKey(ActRuExecution.ACT_RU_EXECUTION, DSL.name("act_fk_exe_super"), new TableField[] { ActRuExecution.ACT_RU_EXECUTION.SUPER_EXEC_ }, Keys.ACT_RU_EXECUTION_PKEY, new TableField[] { ActRuExecution.ACT_RU_EXECUTION.ID_ }, true);
    public static final ForeignKey<ActRuExtTaskRecord, ActGeBytearrayRecord> ACT_RU_EXT_TASK__ACT_FK_EXT_TASK_ERROR_DETAILS = Internal.createForeignKey(ActRuExtTask.ACT_RU_EXT_TASK, DSL.name("act_fk_ext_task_error_details"), new TableField[] { ActRuExtTask.ACT_RU_EXT_TASK.ERROR_DETAILS_ID_ }, Keys.ACT_GE_BYTEARRAY_PKEY, new TableField[] { ActGeBytearray.ACT_GE_BYTEARRAY.ID_ }, true);
    public static final ForeignKey<ActRuExtTaskRecord, ActRuExecutionRecord> ACT_RU_EXT_TASK__ACT_FK_EXT_TASK_EXE = Internal.createForeignKey(ActRuExtTask.ACT_RU_EXT_TASK, DSL.name("act_fk_ext_task_exe"), new TableField[] { ActRuExtTask.ACT_RU_EXT_TASK.EXECUTION_ID_ }, Keys.ACT_RU_EXECUTION_PKEY, new TableField[] { ActRuExecution.ACT_RU_EXECUTION.ID_ }, true);
    public static final ForeignKey<ActRuIdentitylinkRecord, ActReProcdefRecord> ACT_RU_IDENTITYLINK__ACT_FK_ATHRZ_PROCEDEF = Internal.createForeignKey(ActRuIdentitylink.ACT_RU_IDENTITYLINK, DSL.name("act_fk_athrz_procedef"), new TableField[] { ActRuIdentitylink.ACT_RU_IDENTITYLINK.PROC_DEF_ID_ }, Keys.ACT_RE_PROCDEF_PKEY, new TableField[] { ActReProcdef.ACT_RE_PROCDEF.ID_ }, true);
    public static final ForeignKey<ActRuIdentitylinkRecord, ActRuTaskRecord> ACT_RU_IDENTITYLINK__ACT_FK_TSKASS_TASK = Internal.createForeignKey(ActRuIdentitylink.ACT_RU_IDENTITYLINK, DSL.name("act_fk_tskass_task"), new TableField[] { ActRuIdentitylink.ACT_RU_IDENTITYLINK.TASK_ID_ }, Keys.ACT_RU_TASK_PKEY, new TableField[] { ActRuTask.ACT_RU_TASK.ID_ }, true);
    public static final ForeignKey<ActRuIncidentRecord, ActRuIncidentRecord> ACT_RU_INCIDENT__ACT_FK_INC_CAUSE = Internal.createForeignKey(ActRuIncident.ACT_RU_INCIDENT, DSL.name("act_fk_inc_cause"), new TableField[] { ActRuIncident.ACT_RU_INCIDENT.CAUSE_INCIDENT_ID_ }, Keys.ACT_RU_INCIDENT_PKEY, new TableField[] { ActRuIncident.ACT_RU_INCIDENT.ID_ }, true);
    public static final ForeignKey<ActRuIncidentRecord, ActRuExecutionRecord> ACT_RU_INCIDENT__ACT_FK_INC_EXE = Internal.createForeignKey(ActRuIncident.ACT_RU_INCIDENT, DSL.name("act_fk_inc_exe"), new TableField[] { ActRuIncident.ACT_RU_INCIDENT.EXECUTION_ID_ }, Keys.ACT_RU_EXECUTION_PKEY, new TableField[] { ActRuExecution.ACT_RU_EXECUTION.ID_ }, true);
    public static final ForeignKey<ActRuIncidentRecord, ActRuJobdefRecord> ACT_RU_INCIDENT__ACT_FK_INC_JOB_DEF = Internal.createForeignKey(ActRuIncident.ACT_RU_INCIDENT, DSL.name("act_fk_inc_job_def"), new TableField[] { ActRuIncident.ACT_RU_INCIDENT.JOB_DEF_ID_ }, Keys.ACT_RU_JOBDEF_PKEY, new TableField[] { ActRuJobdef.ACT_RU_JOBDEF.ID_ }, true);
    public static final ForeignKey<ActRuIncidentRecord, ActReProcdefRecord> ACT_RU_INCIDENT__ACT_FK_INC_PROCDEF = Internal.createForeignKey(ActRuIncident.ACT_RU_INCIDENT, DSL.name("act_fk_inc_procdef"), new TableField[] { ActRuIncident.ACT_RU_INCIDENT.PROC_DEF_ID_ }, Keys.ACT_RE_PROCDEF_PKEY, new TableField[] { ActReProcdef.ACT_RE_PROCDEF.ID_ }, true);
    public static final ForeignKey<ActRuIncidentRecord, ActRuExecutionRecord> ACT_RU_INCIDENT__ACT_FK_INC_PROCINST = Internal.createForeignKey(ActRuIncident.ACT_RU_INCIDENT, DSL.name("act_fk_inc_procinst"), new TableField[] { ActRuIncident.ACT_RU_INCIDENT.PROC_INST_ID_ }, Keys.ACT_RU_EXECUTION_PKEY, new TableField[] { ActRuExecution.ACT_RU_EXECUTION.ID_ }, true);
    public static final ForeignKey<ActRuIncidentRecord, ActRuIncidentRecord> ACT_RU_INCIDENT__ACT_FK_INC_RCAUSE = Internal.createForeignKey(ActRuIncident.ACT_RU_INCIDENT, DSL.name("act_fk_inc_rcause"), new TableField[] { ActRuIncident.ACT_RU_INCIDENT.ROOT_CAUSE_INCIDENT_ID_ }, Keys.ACT_RU_INCIDENT_PKEY, new TableField[] { ActRuIncident.ACT_RU_INCIDENT.ID_ }, true);
    public static final ForeignKey<ActRuJobRecord, ActGeBytearrayRecord> ACT_RU_JOB__ACT_FK_JOB_EXCEPTION = Internal.createForeignKey(ActRuJob.ACT_RU_JOB, DSL.name("act_fk_job_exception"), new TableField[] { ActRuJob.ACT_RU_JOB.EXCEPTION_STACK_ID_ }, Keys.ACT_GE_BYTEARRAY_PKEY, new TableField[] { ActGeBytearray.ACT_GE_BYTEARRAY.ID_ }, true);
    public static final ForeignKey<ActRuTaskRecord, ActReCaseDefRecord> ACT_RU_TASK__ACT_FK_TASK_CASE_DEF = Internal.createForeignKey(ActRuTask.ACT_RU_TASK, DSL.name("act_fk_task_case_def"), new TableField[] { ActRuTask.ACT_RU_TASK.CASE_DEF_ID_ }, Keys.ACT_RE_CASE_DEF_PKEY, new TableField[] { ActReCaseDef.ACT_RE_CASE_DEF.ID_ }, true);
    public static final ForeignKey<ActRuTaskRecord, ActRuCaseExecutionRecord> ACT_RU_TASK__ACT_FK_TASK_CASE_EXE = Internal.createForeignKey(ActRuTask.ACT_RU_TASK, DSL.name("act_fk_task_case_exe"), new TableField[] { ActRuTask.ACT_RU_TASK.CASE_EXECUTION_ID_ }, Keys.ACT_RU_CASE_EXECUTION_PKEY, new TableField[] { ActRuCaseExecution.ACT_RU_CASE_EXECUTION.ID_ }, true);
    public static final ForeignKey<ActRuTaskRecord, ActRuExecutionRecord> ACT_RU_TASK__ACT_FK_TASK_EXE = Internal.createForeignKey(ActRuTask.ACT_RU_TASK, DSL.name("act_fk_task_exe"), new TableField[] { ActRuTask.ACT_RU_TASK.EXECUTION_ID_ }, Keys.ACT_RU_EXECUTION_PKEY, new TableField[] { ActRuExecution.ACT_RU_EXECUTION.ID_ }, true);
    public static final ForeignKey<ActRuTaskRecord, ActReProcdefRecord> ACT_RU_TASK__ACT_FK_TASK_PROCDEF = Internal.createForeignKey(ActRuTask.ACT_RU_TASK, DSL.name("act_fk_task_procdef"), new TableField[] { ActRuTask.ACT_RU_TASK.PROC_DEF_ID_ }, Keys.ACT_RE_PROCDEF_PKEY, new TableField[] { ActReProcdef.ACT_RE_PROCDEF.ID_ }, true);
    public static final ForeignKey<ActRuTaskRecord, ActRuExecutionRecord> ACT_RU_TASK__ACT_FK_TASK_PROCINST = Internal.createForeignKey(ActRuTask.ACT_RU_TASK, DSL.name("act_fk_task_procinst"), new TableField[] { ActRuTask.ACT_RU_TASK.PROC_INST_ID_ }, Keys.ACT_RU_EXECUTION_PKEY, new TableField[] { ActRuExecution.ACT_RU_EXECUTION.ID_ }, true);
    public static final ForeignKey<ActRuVariableRecord, ActRuBatchRecord> ACT_RU_VARIABLE__ACT_FK_VAR_BATCH = Internal.createForeignKey(ActRuVariable.ACT_RU_VARIABLE, DSL.name("act_fk_var_batch"), new TableField[] { ActRuVariable.ACT_RU_VARIABLE.BATCH_ID_ }, Keys.ACT_RU_BATCH_PKEY, new TableField[] { ActRuBatch.ACT_RU_BATCH.ID_ }, true);
    public static final ForeignKey<ActRuVariableRecord, ActGeBytearrayRecord> ACT_RU_VARIABLE__ACT_FK_VAR_BYTEARRAY = Internal.createForeignKey(ActRuVariable.ACT_RU_VARIABLE, DSL.name("act_fk_var_bytearray"), new TableField[] { ActRuVariable.ACT_RU_VARIABLE.BYTEARRAY_ID_ }, Keys.ACT_GE_BYTEARRAY_PKEY, new TableField[] { ActGeBytearray.ACT_GE_BYTEARRAY.ID_ }, true);
    public static final ForeignKey<ActRuVariableRecord, ActRuCaseExecutionRecord> ACT_RU_VARIABLE__ACT_FK_VAR_CASE_EXE = Internal.createForeignKey(ActRuVariable.ACT_RU_VARIABLE, DSL.name("act_fk_var_case_exe"), new TableField[] { ActRuVariable.ACT_RU_VARIABLE.CASE_EXECUTION_ID_ }, Keys.ACT_RU_CASE_EXECUTION_PKEY, new TableField[] { ActRuCaseExecution.ACT_RU_CASE_EXECUTION.ID_ }, true);
    public static final ForeignKey<ActRuVariableRecord, ActRuCaseExecutionRecord> ACT_RU_VARIABLE__ACT_FK_VAR_CASE_INST = Internal.createForeignKey(ActRuVariable.ACT_RU_VARIABLE, DSL.name("act_fk_var_case_inst"), new TableField[] { ActRuVariable.ACT_RU_VARIABLE.CASE_INST_ID_ }, Keys.ACT_RU_CASE_EXECUTION_PKEY, new TableField[] { ActRuCaseExecution.ACT_RU_CASE_EXECUTION.ID_ }, true);
    public static final ForeignKey<ActRuVariableRecord, ActRuExecutionRecord> ACT_RU_VARIABLE__ACT_FK_VAR_EXE = Internal.createForeignKey(ActRuVariable.ACT_RU_VARIABLE, DSL.name("act_fk_var_exe"), new TableField[] { ActRuVariable.ACT_RU_VARIABLE.EXECUTION_ID_ }, Keys.ACT_RU_EXECUTION_PKEY, new TableField[] { ActRuExecution.ACT_RU_EXECUTION.ID_ }, true);
    public static final ForeignKey<ActRuVariableRecord, ActRuExecutionRecord> ACT_RU_VARIABLE__ACT_FK_VAR_PROCINST = Internal.createForeignKey(ActRuVariable.ACT_RU_VARIABLE, DSL.name("act_fk_var_procinst"), new TableField[] { ActRuVariable.ACT_RU_VARIABLE.PROC_INST_ID_ }, Keys.ACT_RU_EXECUTION_PKEY, new TableField[] { ActRuExecution.ACT_RU_EXECUTION.ID_ }, true);
}
