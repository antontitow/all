/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function16;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tito.jooq.Greygold;
import ru.tito.jooq.Indexes;
import ru.tito.jooq.Keys;
import ru.tito.jooq.tables.records.ActRuIncidentRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActRuIncident extends TableImpl<ActRuIncidentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>greygold.act_ru_incident</code>
     */
    public static final ActRuIncident ACT_RU_INCIDENT = new ActRuIncident();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActRuIncidentRecord> getRecordType() {
        return ActRuIncidentRecord.class;
    }

    /**
     * The column <code>greygold.act_ru_incident.id_</code>.
     */
    public final TableField<ActRuIncidentRecord, String> ID_ = createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_ru_incident.rev_</code>.
     */
    public final TableField<ActRuIncidentRecord, Integer> REV_ = createField(DSL.name("rev_"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>greygold.act_ru_incident.incident_timestamp_</code>.
     */
    public final TableField<ActRuIncidentRecord, LocalDateTime> INCIDENT_TIMESTAMP_ = createField(DSL.name("incident_timestamp_"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>greygold.act_ru_incident.incident_msg_</code>.
     */
    public final TableField<ActRuIncidentRecord, String> INCIDENT_MSG_ = createField(DSL.name("incident_msg_"), SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>greygold.act_ru_incident.incident_type_</code>.
     */
    public final TableField<ActRuIncidentRecord, String> INCIDENT_TYPE_ = createField(DSL.name("incident_type_"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>greygold.act_ru_incident.execution_id_</code>.
     */
    public final TableField<ActRuIncidentRecord, String> EXECUTION_ID_ = createField(DSL.name("execution_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_incident.activity_id_</code>.
     */
    public final TableField<ActRuIncidentRecord, String> ACTIVITY_ID_ = createField(DSL.name("activity_id_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_ru_incident.failed_activity_id_</code>.
     */
    public final TableField<ActRuIncidentRecord, String> FAILED_ACTIVITY_ID_ = createField(DSL.name("failed_activity_id_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_ru_incident.proc_inst_id_</code>.
     */
    public final TableField<ActRuIncidentRecord, String> PROC_INST_ID_ = createField(DSL.name("proc_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_incident.proc_def_id_</code>.
     */
    public final TableField<ActRuIncidentRecord, String> PROC_DEF_ID_ = createField(DSL.name("proc_def_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_incident.cause_incident_id_</code>.
     */
    public final TableField<ActRuIncidentRecord, String> CAUSE_INCIDENT_ID_ = createField(DSL.name("cause_incident_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_incident.root_cause_incident_id_</code>.
     */
    public final TableField<ActRuIncidentRecord, String> ROOT_CAUSE_INCIDENT_ID_ = createField(DSL.name("root_cause_incident_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_incident.configuration_</code>.
     */
    public final TableField<ActRuIncidentRecord, String> CONFIGURATION_ = createField(DSL.name("configuration_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_ru_incident.tenant_id_</code>.
     */
    public final TableField<ActRuIncidentRecord, String> TENANT_ID_ = createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_incident.job_def_id_</code>.
     */
    public final TableField<ActRuIncidentRecord, String> JOB_DEF_ID_ = createField(DSL.name("job_def_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_incident.annotation_</code>.
     */
    public final TableField<ActRuIncidentRecord, String> ANNOTATION_ = createField(DSL.name("annotation_"), SQLDataType.VARCHAR(4000), this, "");

    private ActRuIncident(Name alias, Table<ActRuIncidentRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActRuIncident(Name alias, Table<ActRuIncidentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>greygold.act_ru_incident</code> table reference
     */
    public ActRuIncident(String alias) {
        this(DSL.name(alias), ACT_RU_INCIDENT);
    }

    /**
     * Create an aliased <code>greygold.act_ru_incident</code> table reference
     */
    public ActRuIncident(Name alias) {
        this(alias, ACT_RU_INCIDENT);
    }

    /**
     * Create a <code>greygold.act_ru_incident</code> table reference
     */
    public ActRuIncident() {
        this(DSL.name("act_ru_incident"), null);
    }

    public <O extends Record> ActRuIncident(Table<O> child, ForeignKey<O, ActRuIncidentRecord> key) {
        super(child, key, ACT_RU_INCIDENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Greygold.GREYGOLD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACT_IDX_INC_CAUSEINCID, Indexes.ACT_IDX_INC_CONFIGURATION, Indexes.ACT_IDX_INC_EXID, Indexes.ACT_IDX_INC_JOB_DEF, Indexes.ACT_IDX_INC_PROCDEFID, Indexes.ACT_IDX_INC_PROCINSTID, Indexes.ACT_IDX_INC_ROOTCAUSEINCID, Indexes.ACT_IDX_INC_TENANT_ID);
    }

    @Override
    public UniqueKey<ActRuIncidentRecord> getPrimaryKey() {
        return Keys.ACT_RU_INCIDENT_PKEY;
    }

    @Override
    public List<ForeignKey<ActRuIncidentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACT_RU_INCIDENT__ACT_FK_INC_EXE, Keys.ACT_RU_INCIDENT__ACT_FK_INC_PROCINST, Keys.ACT_RU_INCIDENT__ACT_FK_INC_PROCDEF, Keys.ACT_RU_INCIDENT__ACT_FK_INC_CAUSE, Keys.ACT_RU_INCIDENT__ACT_FK_INC_RCAUSE, Keys.ACT_RU_INCIDENT__ACT_FK_INC_JOB_DEF);
    }

    private transient ActRuExecution _actFkIncExe;
    private transient ActRuExecution _actFkIncProcinst;
    private transient ActReProcdef _actReProcdef;
    private transient ActRuIncident _actFkIncCause;
    private transient ActRuIncident _actFkIncRcause;
    private transient ActRuJobdef _actRuJobdef;

    /**
     * Get the implicit join path to the <code>greygold.act_ru_execution</code>
     * table, via the <code>act_fk_inc_exe</code> key.
     */
    public ActRuExecution actFkIncExe() {
        if (_actFkIncExe == null)
            _actFkIncExe = new ActRuExecution(this, Keys.ACT_RU_INCIDENT__ACT_FK_INC_EXE);

        return _actFkIncExe;
    }

    /**
     * Get the implicit join path to the <code>greygold.act_ru_execution</code>
     * table, via the <code>act_fk_inc_procinst</code> key.
     */
    public ActRuExecution actFkIncProcinst() {
        if (_actFkIncProcinst == null)
            _actFkIncProcinst = new ActRuExecution(this, Keys.ACT_RU_INCIDENT__ACT_FK_INC_PROCINST);

        return _actFkIncProcinst;
    }

    /**
     * Get the implicit join path to the <code>greygold.act_re_procdef</code>
     * table.
     */
    public ActReProcdef actReProcdef() {
        if (_actReProcdef == null)
            _actReProcdef = new ActReProcdef(this, Keys.ACT_RU_INCIDENT__ACT_FK_INC_PROCDEF);

        return _actReProcdef;
    }

    /**
     * Get the implicit join path to the <code>greygold.act_ru_incident</code>
     * table, via the <code>act_fk_inc_cause</code> key.
     */
    public ActRuIncident actFkIncCause() {
        if (_actFkIncCause == null)
            _actFkIncCause = new ActRuIncident(this, Keys.ACT_RU_INCIDENT__ACT_FK_INC_CAUSE);

        return _actFkIncCause;
    }

    /**
     * Get the implicit join path to the <code>greygold.act_ru_incident</code>
     * table, via the <code>act_fk_inc_rcause</code> key.
     */
    public ActRuIncident actFkIncRcause() {
        if (_actFkIncRcause == null)
            _actFkIncRcause = new ActRuIncident(this, Keys.ACT_RU_INCIDENT__ACT_FK_INC_RCAUSE);

        return _actFkIncRcause;
    }

    /**
     * Get the implicit join path to the <code>greygold.act_ru_jobdef</code>
     * table.
     */
    public ActRuJobdef actRuJobdef() {
        if (_actRuJobdef == null)
            _actRuJobdef = new ActRuJobdef(this, Keys.ACT_RU_INCIDENT__ACT_FK_INC_JOB_DEF);

        return _actRuJobdef;
    }

    @Override
    public ActRuIncident as(String alias) {
        return new ActRuIncident(DSL.name(alias), this);
    }

    @Override
    public ActRuIncident as(Name alias) {
        return new ActRuIncident(alias, this);
    }

    @Override
    public ActRuIncident as(Table<?> alias) {
        return new ActRuIncident(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuIncident rename(String name) {
        return new ActRuIncident(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuIncident rename(Name name) {
        return new ActRuIncident(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuIncident rename(Table<?> name) {
        return new ActRuIncident(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<String, Integer, LocalDateTime, String, String, String, String, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function16<? super String, ? super Integer, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function16<? super String, ? super Integer, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
