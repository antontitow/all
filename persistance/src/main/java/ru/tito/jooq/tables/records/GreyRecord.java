/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables.records;


import java.math.BigDecimal;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import ru.tito.jooq.tables.Grey;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GreyRecord extends UpdatableRecordImpl<GreyRecord> implements Record3<Long, JSONB, BigDecimal> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>greygold.grey.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>greygold.grey.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>greygold.grey.result</code>.
     */
    public void setResult(JSONB value) {
        set(1, value);
    }

    /**
     * Getter for <code>greygold.grey.result</code>.
     */
    public JSONB getResult() {
        return (JSONB) get(1);
    }

    /**
     * Setter for <code>greygold.grey.number</code>.
     */
    public void setNumber(BigDecimal value) {
        set(2, value);
    }

    /**
     * Getter for <code>greygold.grey.number</code>.
     */
    public BigDecimal getNumber() {
        return (BigDecimal) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, JSONB, BigDecimal> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, JSONB, BigDecimal> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Grey.GREY.ID;
    }

    @Override
    public Field<JSONB> field2() {
        return Grey.GREY.RESULT;
    }

    @Override
    public Field<BigDecimal> field3() {
        return Grey.GREY.NUMBER;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public JSONB component2() {
        return getResult();
    }

    @Override
    public BigDecimal component3() {
        return getNumber();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public JSONB value2() {
        return getResult();
    }

    @Override
    public BigDecimal value3() {
        return getNumber();
    }

    @Override
    public GreyRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public GreyRecord value2(JSONB value) {
        setResult(value);
        return this;
    }

    @Override
    public GreyRecord value3(BigDecimal value) {
        setNumber(value);
        return this;
    }

    @Override
    public GreyRecord values(Long value1, JSONB value2, BigDecimal value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GreyRecord
     */
    public GreyRecord() {
        super(Grey.GREY);
    }

    /**
     * Create a detached, initialised GreyRecord
     */
    public GreyRecord(Long id, JSONB result, BigDecimal number) {
        super(Grey.GREY);

        setId(id);
        setResult(result);
        setNumber(number);
        resetChangedOnNotNull();
    }
}
