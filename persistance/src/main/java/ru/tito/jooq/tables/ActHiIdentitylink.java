/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function13;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tito.jooq.Greygold;
import ru.tito.jooq.Indexes;
import ru.tito.jooq.Keys;
import ru.tito.jooq.tables.records.ActHiIdentitylinkRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActHiIdentitylink extends TableImpl<ActHiIdentitylinkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>greygold.act_hi_identitylink</code>
     */
    public static final ActHiIdentitylink ACT_HI_IDENTITYLINK = new ActHiIdentitylink();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActHiIdentitylinkRecord> getRecordType() {
        return ActHiIdentitylinkRecord.class;
    }

    /**
     * The column <code>greygold.act_hi_identitylink.id_</code>.
     */
    public final TableField<ActHiIdentitylinkRecord, String> ID_ = createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_identitylink.timestamp_</code>.
     */
    public final TableField<ActHiIdentitylinkRecord, LocalDateTime> TIMESTAMP_ = createField(DSL.name("timestamp_"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_identitylink.type_</code>.
     */
    public final TableField<ActHiIdentitylinkRecord, String> TYPE_ = createField(DSL.name("type_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_identitylink.user_id_</code>.
     */
    public final TableField<ActHiIdentitylinkRecord, String> USER_ID_ = createField(DSL.name("user_id_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_identitylink.group_id_</code>.
     */
    public final TableField<ActHiIdentitylinkRecord, String> GROUP_ID_ = createField(DSL.name("group_id_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_identitylink.task_id_</code>.
     */
    public final TableField<ActHiIdentitylinkRecord, String> TASK_ID_ = createField(DSL.name("task_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_identitylink.root_proc_inst_id_</code>.
     */
    public final TableField<ActHiIdentitylinkRecord, String> ROOT_PROC_INST_ID_ = createField(DSL.name("root_proc_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_identitylink.proc_def_id_</code>.
     */
    public final TableField<ActHiIdentitylinkRecord, String> PROC_DEF_ID_ = createField(DSL.name("proc_def_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_identitylink.operation_type_</code>.
     */
    public final TableField<ActHiIdentitylinkRecord, String> OPERATION_TYPE_ = createField(DSL.name("operation_type_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_identitylink.assigner_id_</code>.
     */
    public final TableField<ActHiIdentitylinkRecord, String> ASSIGNER_ID_ = createField(DSL.name("assigner_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_identitylink.proc_def_key_</code>.
     */
    public final TableField<ActHiIdentitylinkRecord, String> PROC_DEF_KEY_ = createField(DSL.name("proc_def_key_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_identitylink.tenant_id_</code>.
     */
    public final TableField<ActHiIdentitylinkRecord, String> TENANT_ID_ = createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_identitylink.removal_time_</code>.
     */
    public final TableField<ActHiIdentitylinkRecord, LocalDateTime> REMOVAL_TIME_ = createField(DSL.name("removal_time_"), SQLDataType.LOCALDATETIME(6), this, "");

    private ActHiIdentitylink(Name alias, Table<ActHiIdentitylinkRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActHiIdentitylink(Name alias, Table<ActHiIdentitylinkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>greygold.act_hi_identitylink</code> table
     * reference
     */
    public ActHiIdentitylink(String alias) {
        this(DSL.name(alias), ACT_HI_IDENTITYLINK);
    }

    /**
     * Create an aliased <code>greygold.act_hi_identitylink</code> table
     * reference
     */
    public ActHiIdentitylink(Name alias) {
        this(alias, ACT_HI_IDENTITYLINK);
    }

    /**
     * Create a <code>greygold.act_hi_identitylink</code> table reference
     */
    public ActHiIdentitylink() {
        this(DSL.name("act_hi_identitylink"), null);
    }

    public <O extends Record> ActHiIdentitylink(Table<O> child, ForeignKey<O, ActHiIdentitylinkRecord> key) {
        super(child, key, ACT_HI_IDENTITYLINK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Greygold.GREYGOLD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACT_IDX_HI_IDENT_LINK_RM_TIME, Indexes.ACT_IDX_HI_IDENT_LINK_TASK, Indexes.ACT_IDX_HI_IDENT_LNK_GROUP, Indexes.ACT_IDX_HI_IDENT_LNK_PROC_DEF_KEY, Indexes.ACT_IDX_HI_IDENT_LNK_ROOT_PI, Indexes.ACT_IDX_HI_IDENT_LNK_TENANT_ID, Indexes.ACT_IDX_HI_IDENT_LNK_TIMESTAMP, Indexes.ACT_IDX_HI_IDENT_LNK_USER);
    }

    @Override
    public UniqueKey<ActHiIdentitylinkRecord> getPrimaryKey() {
        return Keys.ACT_HI_IDENTITYLINK_PKEY;
    }

    @Override
    public ActHiIdentitylink as(String alias) {
        return new ActHiIdentitylink(DSL.name(alias), this);
    }

    @Override
    public ActHiIdentitylink as(Name alias) {
        return new ActHiIdentitylink(alias, this);
    }

    @Override
    public ActHiIdentitylink as(Table<?> alias) {
        return new ActHiIdentitylink(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiIdentitylink rename(String name) {
        return new ActHiIdentitylink(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiIdentitylink rename(Name name) {
        return new ActHiIdentitylink(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiIdentitylink rename(Table<?> name) {
        return new ActHiIdentitylink(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<String, LocalDateTime, String, String, String, String, String, String, String, String, String, String, LocalDateTime> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function13<? super String, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function13<? super String, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
