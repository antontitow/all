/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function20;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tito.jooq.Greygold;
import ru.tito.jooq.Indexes;
import ru.tito.jooq.Keys;
import ru.tito.jooq.tables.records.ActRuVariableRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActRuVariable extends TableImpl<ActRuVariableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>greygold.act_ru_variable</code>
     */
    public static final ActRuVariable ACT_RU_VARIABLE = new ActRuVariable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActRuVariableRecord> getRecordType() {
        return ActRuVariableRecord.class;
    }

    /**
     * The column <code>greygold.act_ru_variable.id_</code>.
     */
    public final TableField<ActRuVariableRecord, String> ID_ = createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_ru_variable.rev_</code>.
     */
    public final TableField<ActRuVariableRecord, Integer> REV_ = createField(DSL.name("rev_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_ru_variable.type_</code>.
     */
    public final TableField<ActRuVariableRecord, String> TYPE_ = createField(DSL.name("type_"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>greygold.act_ru_variable.name_</code>.
     */
    public final TableField<ActRuVariableRecord, String> NAME_ = createField(DSL.name("name_"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>greygold.act_ru_variable.execution_id_</code>.
     */
    public final TableField<ActRuVariableRecord, String> EXECUTION_ID_ = createField(DSL.name("execution_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_variable.proc_inst_id_</code>.
     */
    public final TableField<ActRuVariableRecord, String> PROC_INST_ID_ = createField(DSL.name("proc_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_variable.proc_def_id_</code>.
     */
    public final TableField<ActRuVariableRecord, String> PROC_DEF_ID_ = createField(DSL.name("proc_def_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_variable.case_execution_id_</code>.
     */
    public final TableField<ActRuVariableRecord, String> CASE_EXECUTION_ID_ = createField(DSL.name("case_execution_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_variable.case_inst_id_</code>.
     */
    public final TableField<ActRuVariableRecord, String> CASE_INST_ID_ = createField(DSL.name("case_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_variable.task_id_</code>.
     */
    public final TableField<ActRuVariableRecord, String> TASK_ID_ = createField(DSL.name("task_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_variable.batch_id_</code>.
     */
    public final TableField<ActRuVariableRecord, String> BATCH_ID_ = createField(DSL.name("batch_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_variable.bytearray_id_</code>.
     */
    public final TableField<ActRuVariableRecord, String> BYTEARRAY_ID_ = createField(DSL.name("bytearray_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_variable.double_</code>.
     */
    public final TableField<ActRuVariableRecord, Double> DOUBLE_ = createField(DSL.name("double_"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>greygold.act_ru_variable.long_</code>.
     */
    public final TableField<ActRuVariableRecord, Long> LONG_ = createField(DSL.name("long_"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>greygold.act_ru_variable.text_</code>.
     */
    public final TableField<ActRuVariableRecord, String> TEXT_ = createField(DSL.name("text_"), SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>greygold.act_ru_variable.text2_</code>.
     */
    public final TableField<ActRuVariableRecord, String> TEXT2_ = createField(DSL.name("text2_"), SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>greygold.act_ru_variable.var_scope_</code>.
     */
    public final TableField<ActRuVariableRecord, String> VAR_SCOPE_ = createField(DSL.name("var_scope_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_variable.sequence_counter_</code>.
     */
    public final TableField<ActRuVariableRecord, Long> SEQUENCE_COUNTER_ = createField(DSL.name("sequence_counter_"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>greygold.act_ru_variable.is_concurrent_local_</code>.
     */
    public final TableField<ActRuVariableRecord, Boolean> IS_CONCURRENT_LOCAL_ = createField(DSL.name("is_concurrent_local_"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>greygold.act_ru_variable.tenant_id_</code>.
     */
    public final TableField<ActRuVariableRecord, String> TENANT_ID_ = createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "");

    private ActRuVariable(Name alias, Table<ActRuVariableRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActRuVariable(Name alias, Table<ActRuVariableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>greygold.act_ru_variable</code> table reference
     */
    public ActRuVariable(String alias) {
        this(DSL.name(alias), ACT_RU_VARIABLE);
    }

    /**
     * Create an aliased <code>greygold.act_ru_variable</code> table reference
     */
    public ActRuVariable(Name alias) {
        this(alias, ACT_RU_VARIABLE);
    }

    /**
     * Create a <code>greygold.act_ru_variable</code> table reference
     */
    public ActRuVariable() {
        this(DSL.name("act_ru_variable"), null);
    }

    public <O extends Record> ActRuVariable(Table<O> child, ForeignKey<O, ActRuVariableRecord> key) {
        super(child, key, ACT_RU_VARIABLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Greygold.GREYGOLD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACT_IDX_BATCH_ID, Indexes.ACT_IDX_VAR_BYTEARRAY, Indexes.ACT_IDX_VAR_CASE_EXE, Indexes.ACT_IDX_VAR_CASE_INST_ID, Indexes.ACT_IDX_VAR_EXE, Indexes.ACT_IDX_VAR_PROCINST, Indexes.ACT_IDX_VARIABLE_TASK_ID, Indexes.ACT_IDX_VARIABLE_TASK_NAME_TYPE, Indexes.ACT_IDX_VARIABLE_TENANT_ID);
    }

    @Override
    public UniqueKey<ActRuVariableRecord> getPrimaryKey() {
        return Keys.ACT_RU_VARIABLE_PKEY;
    }

    @Override
    public List<UniqueKey<ActRuVariableRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ACT_UNIQ_VARIABLE);
    }

    @Override
    public List<ForeignKey<ActRuVariableRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACT_RU_VARIABLE__ACT_FK_VAR_EXE, Keys.ACT_RU_VARIABLE__ACT_FK_VAR_PROCINST, Keys.ACT_RU_VARIABLE__ACT_FK_VAR_CASE_EXE, Keys.ACT_RU_VARIABLE__ACT_FK_VAR_CASE_INST, Keys.ACT_RU_VARIABLE__ACT_FK_VAR_BATCH, Keys.ACT_RU_VARIABLE__ACT_FK_VAR_BYTEARRAY);
    }

    private transient ActRuExecution _actFkVarExe;
    private transient ActRuExecution _actFkVarProcinst;
    private transient ActRuCaseExecution _actFkVarCaseExe;
    private transient ActRuCaseExecution _actFkVarCaseInst;
    private transient ActRuBatch _actRuBatch;
    private transient ActGeBytearray _actGeBytearray;

    /**
     * Get the implicit join path to the <code>greygold.act_ru_execution</code>
     * table, via the <code>act_fk_var_exe</code> key.
     */
    public ActRuExecution actFkVarExe() {
        if (_actFkVarExe == null)
            _actFkVarExe = new ActRuExecution(this, Keys.ACT_RU_VARIABLE__ACT_FK_VAR_EXE);

        return _actFkVarExe;
    }

    /**
     * Get the implicit join path to the <code>greygold.act_ru_execution</code>
     * table, via the <code>act_fk_var_procinst</code> key.
     */
    public ActRuExecution actFkVarProcinst() {
        if (_actFkVarProcinst == null)
            _actFkVarProcinst = new ActRuExecution(this, Keys.ACT_RU_VARIABLE__ACT_FK_VAR_PROCINST);

        return _actFkVarProcinst;
    }

    /**
     * Get the implicit join path to the
     * <code>greygold.act_ru_case_execution</code> table, via the
     * <code>act_fk_var_case_exe</code> key.
     */
    public ActRuCaseExecution actFkVarCaseExe() {
        if (_actFkVarCaseExe == null)
            _actFkVarCaseExe = new ActRuCaseExecution(this, Keys.ACT_RU_VARIABLE__ACT_FK_VAR_CASE_EXE);

        return _actFkVarCaseExe;
    }

    /**
     * Get the implicit join path to the
     * <code>greygold.act_ru_case_execution</code> table, via the
     * <code>act_fk_var_case_inst</code> key.
     */
    public ActRuCaseExecution actFkVarCaseInst() {
        if (_actFkVarCaseInst == null)
            _actFkVarCaseInst = new ActRuCaseExecution(this, Keys.ACT_RU_VARIABLE__ACT_FK_VAR_CASE_INST);

        return _actFkVarCaseInst;
    }

    /**
     * Get the implicit join path to the <code>greygold.act_ru_batch</code>
     * table.
     */
    public ActRuBatch actRuBatch() {
        if (_actRuBatch == null)
            _actRuBatch = new ActRuBatch(this, Keys.ACT_RU_VARIABLE__ACT_FK_VAR_BATCH);

        return _actRuBatch;
    }

    /**
     * Get the implicit join path to the <code>greygold.act_ge_bytearray</code>
     * table.
     */
    public ActGeBytearray actGeBytearray() {
        if (_actGeBytearray == null)
            _actGeBytearray = new ActGeBytearray(this, Keys.ACT_RU_VARIABLE__ACT_FK_VAR_BYTEARRAY);

        return _actGeBytearray;
    }

    @Override
    public ActRuVariable as(String alias) {
        return new ActRuVariable(DSL.name(alias), this);
    }

    @Override
    public ActRuVariable as(Name alias) {
        return new ActRuVariable(alias, this);
    }

    @Override
    public ActRuVariable as(Table<?> alias) {
        return new ActRuVariable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuVariable rename(String name) {
        return new ActRuVariable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuVariable rename(Name name) {
        return new ActRuVariable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuVariable rename(Table<?> name) {
        return new ActRuVariable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<String, Integer, String, String, String, String, String, String, String, String, String, String, Double, Long, String, String, String, Long, Boolean, String> fieldsRow() {
        return (Row20) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function20<? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Double, ? super Long, ? super String, ? super String, ? super String, ? super Long, ? super Boolean, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function20<? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Double, ? super Long, ? super String, ? super String, ? super String, ? super Long, ? super Boolean, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
