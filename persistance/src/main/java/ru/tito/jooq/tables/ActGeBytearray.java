/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tito.jooq.Greygold;
import ru.tito.jooq.Indexes;
import ru.tito.jooq.Keys;
import ru.tito.jooq.tables.records.ActGeBytearrayRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActGeBytearray extends TableImpl<ActGeBytearrayRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>greygold.act_ge_bytearray</code>
     */
    public static final ActGeBytearray ACT_GE_BYTEARRAY = new ActGeBytearray();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActGeBytearrayRecord> getRecordType() {
        return ActGeBytearrayRecord.class;
    }

    /**
     * The column <code>greygold.act_ge_bytearray.id_</code>.
     */
    public final TableField<ActGeBytearrayRecord, String> ID_ = createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_ge_bytearray.rev_</code>.
     */
    public final TableField<ActGeBytearrayRecord, Integer> REV_ = createField(DSL.name("rev_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_ge_bytearray.name_</code>.
     */
    public final TableField<ActGeBytearrayRecord, String> NAME_ = createField(DSL.name("name_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_ge_bytearray.deployment_id_</code>.
     */
    public final TableField<ActGeBytearrayRecord, String> DEPLOYMENT_ID_ = createField(DSL.name("deployment_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ge_bytearray.bytes_</code>.
     */
    public final TableField<ActGeBytearrayRecord, byte[]> BYTES_ = createField(DSL.name("bytes_"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>greygold.act_ge_bytearray.generated_</code>.
     */
    public final TableField<ActGeBytearrayRecord, Boolean> GENERATED_ = createField(DSL.name("generated_"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>greygold.act_ge_bytearray.tenant_id_</code>.
     */
    public final TableField<ActGeBytearrayRecord, String> TENANT_ID_ = createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ge_bytearray.type_</code>.
     */
    public final TableField<ActGeBytearrayRecord, Integer> TYPE_ = createField(DSL.name("type_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_ge_bytearray.create_time_</code>.
     */
    public final TableField<ActGeBytearrayRecord, LocalDateTime> CREATE_TIME_ = createField(DSL.name("create_time_"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>greygold.act_ge_bytearray.root_proc_inst_id_</code>.
     */
    public final TableField<ActGeBytearrayRecord, String> ROOT_PROC_INST_ID_ = createField(DSL.name("root_proc_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ge_bytearray.removal_time_</code>.
     */
    public final TableField<ActGeBytearrayRecord, LocalDateTime> REMOVAL_TIME_ = createField(DSL.name("removal_time_"), SQLDataType.LOCALDATETIME(6), this, "");

    private ActGeBytearray(Name alias, Table<ActGeBytearrayRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActGeBytearray(Name alias, Table<ActGeBytearrayRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>greygold.act_ge_bytearray</code> table reference
     */
    public ActGeBytearray(String alias) {
        this(DSL.name(alias), ACT_GE_BYTEARRAY);
    }

    /**
     * Create an aliased <code>greygold.act_ge_bytearray</code> table reference
     */
    public ActGeBytearray(Name alias) {
        this(alias, ACT_GE_BYTEARRAY);
    }

    /**
     * Create a <code>greygold.act_ge_bytearray</code> table reference
     */
    public ActGeBytearray() {
        this(DSL.name("act_ge_bytearray"), null);
    }

    public <O extends Record> ActGeBytearray(Table<O> child, ForeignKey<O, ActGeBytearrayRecord> key) {
        super(child, key, ACT_GE_BYTEARRAY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Greygold.GREYGOLD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACT_IDX_BYTEAR_DEPL, Indexes.ACT_IDX_BYTEARRAY_NAME, Indexes.ACT_IDX_BYTEARRAY_RM_TIME, Indexes.ACT_IDX_BYTEARRAY_ROOT_PI);
    }

    @Override
    public UniqueKey<ActGeBytearrayRecord> getPrimaryKey() {
        return Keys.ACT_GE_BYTEARRAY_PKEY;
    }

    @Override
    public List<ForeignKey<ActGeBytearrayRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACT_GE_BYTEARRAY__ACT_FK_BYTEARR_DEPL);
    }

    private transient ActReDeployment _actReDeployment;

    /**
     * Get the implicit join path to the <code>greygold.act_re_deployment</code>
     * table.
     */
    public ActReDeployment actReDeployment() {
        if (_actReDeployment == null)
            _actReDeployment = new ActReDeployment(this, Keys.ACT_GE_BYTEARRAY__ACT_FK_BYTEARR_DEPL);

        return _actReDeployment;
    }

    @Override
    public ActGeBytearray as(String alias) {
        return new ActGeBytearray(DSL.name(alias), this);
    }

    @Override
    public ActGeBytearray as(Name alias) {
        return new ActGeBytearray(alias, this);
    }

    @Override
    public ActGeBytearray as(Table<?> alias) {
        return new ActGeBytearray(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActGeBytearray rename(String name) {
        return new ActGeBytearray(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActGeBytearray rename(Name name) {
        return new ActGeBytearray(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActGeBytearray rename(Table<?> name) {
        return new ActGeBytearray(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, Integer, String, String, byte[], Boolean, String, Integer, LocalDateTime, String, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super String, ? super Integer, ? super String, ? super String, ? super byte[], ? super Boolean, ? super String, ? super Integer, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super String, ? super Integer, ? super String, ? super String, ? super byte[], ? super Boolean, ? super String, ? super Integer, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
