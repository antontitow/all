/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function21;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tito.jooq.Greygold;
import ru.tito.jooq.Indexes;
import ru.tito.jooq.Keys;
import ru.tito.jooq.tables.records.ActHiDecinstRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActHiDecinst extends TableImpl<ActHiDecinstRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>greygold.act_hi_decinst</code>
     */
    public static final ActHiDecinst ACT_HI_DECINST = new ActHiDecinst();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActHiDecinstRecord> getRecordType() {
        return ActHiDecinstRecord.class;
    }

    /**
     * The column <code>greygold.act_hi_decinst.id_</code>.
     */
    public final TableField<ActHiDecinstRecord, String> ID_ = createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_decinst.dec_def_id_</code>.
     */
    public final TableField<ActHiDecinstRecord, String> DEC_DEF_ID_ = createField(DSL.name("dec_def_id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_decinst.dec_def_key_</code>.
     */
    public final TableField<ActHiDecinstRecord, String> DEC_DEF_KEY_ = createField(DSL.name("dec_def_key_"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_decinst.dec_def_name_</code>.
     */
    public final TableField<ActHiDecinstRecord, String> DEC_DEF_NAME_ = createField(DSL.name("dec_def_name_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_decinst.proc_def_key_</code>.
     */
    public final TableField<ActHiDecinstRecord, String> PROC_DEF_KEY_ = createField(DSL.name("proc_def_key_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_decinst.proc_def_id_</code>.
     */
    public final TableField<ActHiDecinstRecord, String> PROC_DEF_ID_ = createField(DSL.name("proc_def_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_decinst.proc_inst_id_</code>.
     */
    public final TableField<ActHiDecinstRecord, String> PROC_INST_ID_ = createField(DSL.name("proc_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_decinst.case_def_key_</code>.
     */
    public final TableField<ActHiDecinstRecord, String> CASE_DEF_KEY_ = createField(DSL.name("case_def_key_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_decinst.case_def_id_</code>.
     */
    public final TableField<ActHiDecinstRecord, String> CASE_DEF_ID_ = createField(DSL.name("case_def_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_decinst.case_inst_id_</code>.
     */
    public final TableField<ActHiDecinstRecord, String> CASE_INST_ID_ = createField(DSL.name("case_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_decinst.act_inst_id_</code>.
     */
    public final TableField<ActHiDecinstRecord, String> ACT_INST_ID_ = createField(DSL.name("act_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_decinst.act_id_</code>.
     */
    public final TableField<ActHiDecinstRecord, String> ACT_ID_ = createField(DSL.name("act_id_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_decinst.eval_time_</code>.
     */
    public final TableField<ActHiDecinstRecord, LocalDateTime> EVAL_TIME_ = createField(DSL.name("eval_time_"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_decinst.removal_time_</code>.
     */
    public final TableField<ActHiDecinstRecord, LocalDateTime> REMOVAL_TIME_ = createField(DSL.name("removal_time_"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>greygold.act_hi_decinst.collect_value_</code>.
     */
    public final TableField<ActHiDecinstRecord, Double> COLLECT_VALUE_ = createField(DSL.name("collect_value_"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>greygold.act_hi_decinst.user_id_</code>.
     */
    public final TableField<ActHiDecinstRecord, String> USER_ID_ = createField(DSL.name("user_id_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_decinst.root_dec_inst_id_</code>.
     */
    public final TableField<ActHiDecinstRecord, String> ROOT_DEC_INST_ID_ = createField(DSL.name("root_dec_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_decinst.root_proc_inst_id_</code>.
     */
    public final TableField<ActHiDecinstRecord, String> ROOT_PROC_INST_ID_ = createField(DSL.name("root_proc_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_decinst.dec_req_id_</code>.
     */
    public final TableField<ActHiDecinstRecord, String> DEC_REQ_ID_ = createField(DSL.name("dec_req_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_decinst.dec_req_key_</code>.
     */
    public final TableField<ActHiDecinstRecord, String> DEC_REQ_KEY_ = createField(DSL.name("dec_req_key_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_decinst.tenant_id_</code>.
     */
    public final TableField<ActHiDecinstRecord, String> TENANT_ID_ = createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "");

    private ActHiDecinst(Name alias, Table<ActHiDecinstRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActHiDecinst(Name alias, Table<ActHiDecinstRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>greygold.act_hi_decinst</code> table reference
     */
    public ActHiDecinst(String alias) {
        this(DSL.name(alias), ACT_HI_DECINST);
    }

    /**
     * Create an aliased <code>greygold.act_hi_decinst</code> table reference
     */
    public ActHiDecinst(Name alias) {
        this(alias, ACT_HI_DECINST);
    }

    /**
     * Create a <code>greygold.act_hi_decinst</code> table reference
     */
    public ActHiDecinst() {
        this(DSL.name("act_hi_decinst"), null);
    }

    public <O extends Record> ActHiDecinst(Table<O> child, ForeignKey<O, ActHiDecinstRecord> key) {
        super(child, key, ACT_HI_DECINST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Greygold.GREYGOLD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACT_IDX_HI_DEC_INST_ACT, Indexes.ACT_IDX_HI_DEC_INST_ACT_INST, Indexes.ACT_IDX_HI_DEC_INST_CI, Indexes.ACT_IDX_HI_DEC_INST_ID, Indexes.ACT_IDX_HI_DEC_INST_KEY, Indexes.ACT_IDX_HI_DEC_INST_PI, Indexes.ACT_IDX_HI_DEC_INST_REQ_ID, Indexes.ACT_IDX_HI_DEC_INST_REQ_KEY, Indexes.ACT_IDX_HI_DEC_INST_RM_TIME, Indexes.ACT_IDX_HI_DEC_INST_ROOT_ID, Indexes.ACT_IDX_HI_DEC_INST_ROOT_PI, Indexes.ACT_IDX_HI_DEC_INST_TENANT_ID, Indexes.ACT_IDX_HI_DEC_INST_TIME);
    }

    @Override
    public UniqueKey<ActHiDecinstRecord> getPrimaryKey() {
        return Keys.ACT_HI_DECINST_PKEY;
    }

    @Override
    public ActHiDecinst as(String alias) {
        return new ActHiDecinst(DSL.name(alias), this);
    }

    @Override
    public ActHiDecinst as(Name alias) {
        return new ActHiDecinst(alias, this);
    }

    @Override
    public ActHiDecinst as(Table<?> alias) {
        return new ActHiDecinst(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiDecinst rename(String name) {
        return new ActHiDecinst(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiDecinst rename(Name name) {
        return new ActHiDecinst(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiDecinst rename(Table<?> name) {
        return new ActHiDecinst(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<String, String, String, String, String, String, String, String, String, String, String, String, LocalDateTime, LocalDateTime, Double, String, String, String, String, String, String> fieldsRow() {
        return (Row21) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function21<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super Double, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function21<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super Double, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
