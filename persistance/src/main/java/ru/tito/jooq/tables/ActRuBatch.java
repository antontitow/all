/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function16;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tito.jooq.Greygold;
import ru.tito.jooq.Indexes;
import ru.tito.jooq.Keys;
import ru.tito.jooq.tables.records.ActRuBatchRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActRuBatch extends TableImpl<ActRuBatchRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>greygold.act_ru_batch</code>
     */
    public static final ActRuBatch ACT_RU_BATCH = new ActRuBatch();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActRuBatchRecord> getRecordType() {
        return ActRuBatchRecord.class;
    }

    /**
     * The column <code>greygold.act_ru_batch.id_</code>.
     */
    public final TableField<ActRuBatchRecord, String> ID_ = createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_ru_batch.rev_</code>.
     */
    public final TableField<ActRuBatchRecord, Integer> REV_ = createField(DSL.name("rev_"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>greygold.act_ru_batch.type_</code>.
     */
    public final TableField<ActRuBatchRecord, String> TYPE_ = createField(DSL.name("type_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_ru_batch.total_jobs_</code>.
     */
    public final TableField<ActRuBatchRecord, Integer> TOTAL_JOBS_ = createField(DSL.name("total_jobs_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_ru_batch.jobs_created_</code>.
     */
    public final TableField<ActRuBatchRecord, Integer> JOBS_CREATED_ = createField(DSL.name("jobs_created_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_ru_batch.jobs_per_seed_</code>.
     */
    public final TableField<ActRuBatchRecord, Integer> JOBS_PER_SEED_ = createField(DSL.name("jobs_per_seed_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_ru_batch.invocations_per_job_</code>.
     */
    public final TableField<ActRuBatchRecord, Integer> INVOCATIONS_PER_JOB_ = createField(DSL.name("invocations_per_job_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_ru_batch.seed_job_def_id_</code>.
     */
    public final TableField<ActRuBatchRecord, String> SEED_JOB_DEF_ID_ = createField(DSL.name("seed_job_def_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_batch.batch_job_def_id_</code>.
     */
    public final TableField<ActRuBatchRecord, String> BATCH_JOB_DEF_ID_ = createField(DSL.name("batch_job_def_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_batch.monitor_job_def_id_</code>.
     */
    public final TableField<ActRuBatchRecord, String> MONITOR_JOB_DEF_ID_ = createField(DSL.name("monitor_job_def_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_batch.suspension_state_</code>.
     */
    public final TableField<ActRuBatchRecord, Integer> SUSPENSION_STATE_ = createField(DSL.name("suspension_state_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_ru_batch.configuration_</code>.
     */
    public final TableField<ActRuBatchRecord, String> CONFIGURATION_ = createField(DSL.name("configuration_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_ru_batch.tenant_id_</code>.
     */
    public final TableField<ActRuBatchRecord, String> TENANT_ID_ = createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_batch.create_user_id_</code>.
     */
    public final TableField<ActRuBatchRecord, String> CREATE_USER_ID_ = createField(DSL.name("create_user_id_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_ru_batch.start_time_</code>.
     */
    public final TableField<ActRuBatchRecord, LocalDateTime> START_TIME_ = createField(DSL.name("start_time_"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>greygold.act_ru_batch.exec_start_time_</code>.
     */
    public final TableField<ActRuBatchRecord, LocalDateTime> EXEC_START_TIME_ = createField(DSL.name("exec_start_time_"), SQLDataType.LOCALDATETIME(6), this, "");

    private ActRuBatch(Name alias, Table<ActRuBatchRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActRuBatch(Name alias, Table<ActRuBatchRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>greygold.act_ru_batch</code> table reference
     */
    public ActRuBatch(String alias) {
        this(DSL.name(alias), ACT_RU_BATCH);
    }

    /**
     * Create an aliased <code>greygold.act_ru_batch</code> table reference
     */
    public ActRuBatch(Name alias) {
        this(alias, ACT_RU_BATCH);
    }

    /**
     * Create a <code>greygold.act_ru_batch</code> table reference
     */
    public ActRuBatch() {
        this(DSL.name("act_ru_batch"), null);
    }

    public <O extends Record> ActRuBatch(Table<O> child, ForeignKey<O, ActRuBatchRecord> key) {
        super(child, key, ACT_RU_BATCH);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Greygold.GREYGOLD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACT_IDX_BATCH_JOB_DEF, Indexes.ACT_IDX_BATCH_MONITOR_JOB_DEF, Indexes.ACT_IDX_BATCH_SEED_JOB_DEF);
    }

    @Override
    public UniqueKey<ActRuBatchRecord> getPrimaryKey() {
        return Keys.ACT_RU_BATCH_PKEY;
    }

    @Override
    public List<ForeignKey<ActRuBatchRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACT_RU_BATCH__ACT_FK_BATCH_SEED_JOB_DEF, Keys.ACT_RU_BATCH__ACT_FK_BATCH_JOB_DEF, Keys.ACT_RU_BATCH__ACT_FK_BATCH_MONITOR_JOB_DEF);
    }

    private transient ActRuJobdef _actFkBatchSeedJobDef;
    private transient ActRuJobdef _actFkBatchJobDef;
    private transient ActRuJobdef _actFkBatchMonitorJobDef;

    /**
     * Get the implicit join path to the <code>greygold.act_ru_jobdef</code>
     * table, via the <code>act_fk_batch_seed_job_def</code> key.
     */
    public ActRuJobdef actFkBatchSeedJobDef() {
        if (_actFkBatchSeedJobDef == null)
            _actFkBatchSeedJobDef = new ActRuJobdef(this, Keys.ACT_RU_BATCH__ACT_FK_BATCH_SEED_JOB_DEF);

        return _actFkBatchSeedJobDef;
    }

    /**
     * Get the implicit join path to the <code>greygold.act_ru_jobdef</code>
     * table, via the <code>act_fk_batch_job_def</code> key.
     */
    public ActRuJobdef actFkBatchJobDef() {
        if (_actFkBatchJobDef == null)
            _actFkBatchJobDef = new ActRuJobdef(this, Keys.ACT_RU_BATCH__ACT_FK_BATCH_JOB_DEF);

        return _actFkBatchJobDef;
    }

    /**
     * Get the implicit join path to the <code>greygold.act_ru_jobdef</code>
     * table, via the <code>act_fk_batch_monitor_job_def</code> key.
     */
    public ActRuJobdef actFkBatchMonitorJobDef() {
        if (_actFkBatchMonitorJobDef == null)
            _actFkBatchMonitorJobDef = new ActRuJobdef(this, Keys.ACT_RU_BATCH__ACT_FK_BATCH_MONITOR_JOB_DEF);

        return _actFkBatchMonitorJobDef;
    }

    @Override
    public ActRuBatch as(String alias) {
        return new ActRuBatch(DSL.name(alias), this);
    }

    @Override
    public ActRuBatch as(Name alias) {
        return new ActRuBatch(alias, this);
    }

    @Override
    public ActRuBatch as(Table<?> alias) {
        return new ActRuBatch(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuBatch rename(String name) {
        return new ActRuBatch(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuBatch rename(Name name) {
        return new ActRuBatch(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuBatch rename(Table<?> name) {
        return new ActRuBatch(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<String, Integer, String, Integer, Integer, Integer, Integer, String, String, String, Integer, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function16<? super String, ? super Integer, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function16<? super String, ? super Integer, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
