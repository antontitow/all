/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tito.jooq.Greygold;
import ru.tito.jooq.Indexes;
import ru.tito.jooq.Keys;
import ru.tito.jooq.tables.records.ActIdMembershipRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActIdMembership extends TableImpl<ActIdMembershipRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>greygold.act_id_membership</code>
     */
    public static final ActIdMembership ACT_ID_MEMBERSHIP = new ActIdMembership();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActIdMembershipRecord> getRecordType() {
        return ActIdMembershipRecord.class;
    }

    /**
     * The column <code>greygold.act_id_membership.user_id_</code>.
     */
    public final TableField<ActIdMembershipRecord, String> USER_ID_ = createField(DSL.name("user_id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_id_membership.group_id_</code>.
     */
    public final TableField<ActIdMembershipRecord, String> GROUP_ID_ = createField(DSL.name("group_id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    private ActIdMembership(Name alias, Table<ActIdMembershipRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActIdMembership(Name alias, Table<ActIdMembershipRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>greygold.act_id_membership</code> table reference
     */
    public ActIdMembership(String alias) {
        this(DSL.name(alias), ACT_ID_MEMBERSHIP);
    }

    /**
     * Create an aliased <code>greygold.act_id_membership</code> table reference
     */
    public ActIdMembership(Name alias) {
        this(alias, ACT_ID_MEMBERSHIP);
    }

    /**
     * Create a <code>greygold.act_id_membership</code> table reference
     */
    public ActIdMembership() {
        this(DSL.name("act_id_membership"), null);
    }

    public <O extends Record> ActIdMembership(Table<O> child, ForeignKey<O, ActIdMembershipRecord> key) {
        super(child, key, ACT_ID_MEMBERSHIP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Greygold.GREYGOLD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACT_IDX_MEMB_GROUP, Indexes.ACT_IDX_MEMB_USER);
    }

    @Override
    public UniqueKey<ActIdMembershipRecord> getPrimaryKey() {
        return Keys.ACT_ID_MEMBERSHIP_PKEY;
    }

    @Override
    public List<ForeignKey<ActIdMembershipRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACT_ID_MEMBERSHIP__ACT_FK_MEMB_USER, Keys.ACT_ID_MEMBERSHIP__ACT_FK_MEMB_GROUP);
    }

    private transient ActIdUser _actIdUser;
    private transient ActIdGroup _actIdGroup;

    /**
     * Get the implicit join path to the <code>greygold.act_id_user</code>
     * table.
     */
    public ActIdUser actIdUser() {
        if (_actIdUser == null)
            _actIdUser = new ActIdUser(this, Keys.ACT_ID_MEMBERSHIP__ACT_FK_MEMB_USER);

        return _actIdUser;
    }

    /**
     * Get the implicit join path to the <code>greygold.act_id_group</code>
     * table.
     */
    public ActIdGroup actIdGroup() {
        if (_actIdGroup == null)
            _actIdGroup = new ActIdGroup(this, Keys.ACT_ID_MEMBERSHIP__ACT_FK_MEMB_GROUP);

        return _actIdGroup;
    }

    @Override
    public ActIdMembership as(String alias) {
        return new ActIdMembership(DSL.name(alias), this);
    }

    @Override
    public ActIdMembership as(Name alias) {
        return new ActIdMembership(alias, this);
    }

    @Override
    public ActIdMembership as(Table<?> alias) {
        return new ActIdMembership(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActIdMembership rename(String name) {
        return new ActIdMembership(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActIdMembership rename(Name name) {
        return new ActIdMembership(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActIdMembership rename(Table<?> name) {
        return new ActIdMembership(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
