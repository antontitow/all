/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function20;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tito.jooq.Greygold;
import ru.tito.jooq.Indexes;
import ru.tito.jooq.Keys;
import ru.tito.jooq.tables.records.ActRuExecutionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActRuExecution extends TableImpl<ActRuExecutionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>greygold.act_ru_execution</code>
     */
    public static final ActRuExecution ACT_RU_EXECUTION = new ActRuExecution();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActRuExecutionRecord> getRecordType() {
        return ActRuExecutionRecord.class;
    }

    /**
     * The column <code>greygold.act_ru_execution.id_</code>.
     */
    public final TableField<ActRuExecutionRecord, String> ID_ = createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_ru_execution.rev_</code>.
     */
    public final TableField<ActRuExecutionRecord, Integer> REV_ = createField(DSL.name("rev_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_ru_execution.root_proc_inst_id_</code>.
     */
    public final TableField<ActRuExecutionRecord, String> ROOT_PROC_INST_ID_ = createField(DSL.name("root_proc_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_execution.proc_inst_id_</code>.
     */
    public final TableField<ActRuExecutionRecord, String> PROC_INST_ID_ = createField(DSL.name("proc_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_execution.business_key_</code>.
     */
    public final TableField<ActRuExecutionRecord, String> BUSINESS_KEY_ = createField(DSL.name("business_key_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_ru_execution.parent_id_</code>.
     */
    public final TableField<ActRuExecutionRecord, String> PARENT_ID_ = createField(DSL.name("parent_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_execution.proc_def_id_</code>.
     */
    public final TableField<ActRuExecutionRecord, String> PROC_DEF_ID_ = createField(DSL.name("proc_def_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_execution.super_exec_</code>.
     */
    public final TableField<ActRuExecutionRecord, String> SUPER_EXEC_ = createField(DSL.name("super_exec_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_execution.super_case_exec_</code>.
     */
    public final TableField<ActRuExecutionRecord, String> SUPER_CASE_EXEC_ = createField(DSL.name("super_case_exec_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_execution.case_inst_id_</code>.
     */
    public final TableField<ActRuExecutionRecord, String> CASE_INST_ID_ = createField(DSL.name("case_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_execution.act_id_</code>.
     */
    public final TableField<ActRuExecutionRecord, String> ACT_ID_ = createField(DSL.name("act_id_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_ru_execution.act_inst_id_</code>.
     */
    public final TableField<ActRuExecutionRecord, String> ACT_INST_ID_ = createField(DSL.name("act_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_execution.is_active_</code>.
     */
    public final TableField<ActRuExecutionRecord, Boolean> IS_ACTIVE_ = createField(DSL.name("is_active_"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>greygold.act_ru_execution.is_concurrent_</code>.
     */
    public final TableField<ActRuExecutionRecord, Boolean> IS_CONCURRENT_ = createField(DSL.name("is_concurrent_"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>greygold.act_ru_execution.is_scope_</code>.
     */
    public final TableField<ActRuExecutionRecord, Boolean> IS_SCOPE_ = createField(DSL.name("is_scope_"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>greygold.act_ru_execution.is_event_scope_</code>.
     */
    public final TableField<ActRuExecutionRecord, Boolean> IS_EVENT_SCOPE_ = createField(DSL.name("is_event_scope_"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>greygold.act_ru_execution.suspension_state_</code>.
     */
    public final TableField<ActRuExecutionRecord, Integer> SUSPENSION_STATE_ = createField(DSL.name("suspension_state_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_ru_execution.cached_ent_state_</code>.
     */
    public final TableField<ActRuExecutionRecord, Integer> CACHED_ENT_STATE_ = createField(DSL.name("cached_ent_state_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_ru_execution.sequence_counter_</code>.
     */
    public final TableField<ActRuExecutionRecord, Long> SEQUENCE_COUNTER_ = createField(DSL.name("sequence_counter_"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>greygold.act_ru_execution.tenant_id_</code>.
     */
    public final TableField<ActRuExecutionRecord, String> TENANT_ID_ = createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "");

    private ActRuExecution(Name alias, Table<ActRuExecutionRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActRuExecution(Name alias, Table<ActRuExecutionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>greygold.act_ru_execution</code> table reference
     */
    public ActRuExecution(String alias) {
        this(DSL.name(alias), ACT_RU_EXECUTION);
    }

    /**
     * Create an aliased <code>greygold.act_ru_execution</code> table reference
     */
    public ActRuExecution(Name alias) {
        this(alias, ACT_RU_EXECUTION);
    }

    /**
     * Create a <code>greygold.act_ru_execution</code> table reference
     */
    public ActRuExecution() {
        this(DSL.name("act_ru_execution"), null);
    }

    public <O extends Record> ActRuExecution(Table<O> child, ForeignKey<O, ActRuExecutionRecord> key) {
        super(child, key, ACT_RU_EXECUTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Greygold.GREYGOLD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACT_IDX_EXE_PARENT, Indexes.ACT_IDX_EXE_PROCDEF, Indexes.ACT_IDX_EXE_PROCINST, Indexes.ACT_IDX_EXE_ROOT_PI, Indexes.ACT_IDX_EXE_SUPER, Indexes.ACT_IDX_EXEC_BUSKEY, Indexes.ACT_IDX_EXEC_TENANT_ID);
    }

    @Override
    public UniqueKey<ActRuExecutionRecord> getPrimaryKey() {
        return Keys.ACT_RU_EXECUTION_PKEY;
    }

    @Override
    public List<ForeignKey<ActRuExecutionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACT_RU_EXECUTION__ACT_FK_EXE_PROCINST, Keys.ACT_RU_EXECUTION__ACT_FK_EXE_PARENT, Keys.ACT_RU_EXECUTION__ACT_FK_EXE_PROCDEF, Keys.ACT_RU_EXECUTION__ACT_FK_EXE_SUPER);
    }

    private transient ActRuExecution _actFkExeProcinst;
    private transient ActRuExecution _actFkExeParent;
    private transient ActReProcdef _actReProcdef;
    private transient ActRuExecution _actFkExeSuper;

    /**
     * Get the implicit join path to the <code>greygold.act_ru_execution</code>
     * table, via the <code>act_fk_exe_procinst</code> key.
     */
    public ActRuExecution actFkExeProcinst() {
        if (_actFkExeProcinst == null)
            _actFkExeProcinst = new ActRuExecution(this, Keys.ACT_RU_EXECUTION__ACT_FK_EXE_PROCINST);

        return _actFkExeProcinst;
    }

    /**
     * Get the implicit join path to the <code>greygold.act_ru_execution</code>
     * table, via the <code>act_fk_exe_parent</code> key.
     */
    public ActRuExecution actFkExeParent() {
        if (_actFkExeParent == null)
            _actFkExeParent = new ActRuExecution(this, Keys.ACT_RU_EXECUTION__ACT_FK_EXE_PARENT);

        return _actFkExeParent;
    }

    /**
     * Get the implicit join path to the <code>greygold.act_re_procdef</code>
     * table.
     */
    public ActReProcdef actReProcdef() {
        if (_actReProcdef == null)
            _actReProcdef = new ActReProcdef(this, Keys.ACT_RU_EXECUTION__ACT_FK_EXE_PROCDEF);

        return _actReProcdef;
    }

    /**
     * Get the implicit join path to the <code>greygold.act_ru_execution</code>
     * table, via the <code>act_fk_exe_super</code> key.
     */
    public ActRuExecution actFkExeSuper() {
        if (_actFkExeSuper == null)
            _actFkExeSuper = new ActRuExecution(this, Keys.ACT_RU_EXECUTION__ACT_FK_EXE_SUPER);

        return _actFkExeSuper;
    }

    @Override
    public ActRuExecution as(String alias) {
        return new ActRuExecution(DSL.name(alias), this);
    }

    @Override
    public ActRuExecution as(Name alias) {
        return new ActRuExecution(alias, this);
    }

    @Override
    public ActRuExecution as(Table<?> alias) {
        return new ActRuExecution(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuExecution rename(String name) {
        return new ActRuExecution(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuExecution rename(Name name) {
        return new ActRuExecution(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuExecution rename(Table<?> name) {
        return new ActRuExecution(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<String, Integer, String, String, String, String, String, String, String, String, String, String, Boolean, Boolean, Boolean, Boolean, Integer, Integer, Long, String> fieldsRow() {
        return (Row20) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function20<? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? super Boolean, ? super Boolean, ? super Integer, ? super Integer, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function20<? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? super Boolean, ? super Boolean, ? super Integer, ? super Integer, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
