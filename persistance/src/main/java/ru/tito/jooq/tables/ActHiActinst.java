/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function21;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tito.jooq.Greygold;
import ru.tito.jooq.Indexes;
import ru.tito.jooq.Keys;
import ru.tito.jooq.tables.records.ActHiActinstRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActHiActinst extends TableImpl<ActHiActinstRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>greygold.act_hi_actinst</code>
     */
    public static final ActHiActinst ACT_HI_ACTINST = new ActHiActinst();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActHiActinstRecord> getRecordType() {
        return ActHiActinstRecord.class;
    }

    /**
     * The column <code>greygold.act_hi_actinst.id_</code>.
     */
    public final TableField<ActHiActinstRecord, String> ID_ = createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_actinst.parent_act_inst_id_</code>.
     */
    public final TableField<ActHiActinstRecord, String> PARENT_ACT_INST_ID_ = createField(DSL.name("parent_act_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_actinst.proc_def_key_</code>.
     */
    public final TableField<ActHiActinstRecord, String> PROC_DEF_KEY_ = createField(DSL.name("proc_def_key_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_actinst.proc_def_id_</code>.
     */
    public final TableField<ActHiActinstRecord, String> PROC_DEF_ID_ = createField(DSL.name("proc_def_id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_actinst.root_proc_inst_id_</code>.
     */
    public final TableField<ActHiActinstRecord, String> ROOT_PROC_INST_ID_ = createField(DSL.name("root_proc_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_actinst.proc_inst_id_</code>.
     */
    public final TableField<ActHiActinstRecord, String> PROC_INST_ID_ = createField(DSL.name("proc_inst_id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_actinst.execution_id_</code>.
     */
    public final TableField<ActHiActinstRecord, String> EXECUTION_ID_ = createField(DSL.name("execution_id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_actinst.act_id_</code>.
     */
    public final TableField<ActHiActinstRecord, String> ACT_ID_ = createField(DSL.name("act_id_"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_actinst.task_id_</code>.
     */
    public final TableField<ActHiActinstRecord, String> TASK_ID_ = createField(DSL.name("task_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_actinst.call_proc_inst_id_</code>.
     */
    public final TableField<ActHiActinstRecord, String> CALL_PROC_INST_ID_ = createField(DSL.name("call_proc_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_actinst.call_case_inst_id_</code>.
     */
    public final TableField<ActHiActinstRecord, String> CALL_CASE_INST_ID_ = createField(DSL.name("call_case_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_actinst.act_name_</code>.
     */
    public final TableField<ActHiActinstRecord, String> ACT_NAME_ = createField(DSL.name("act_name_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_actinst.act_type_</code>.
     */
    public final TableField<ActHiActinstRecord, String> ACT_TYPE_ = createField(DSL.name("act_type_"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_actinst.assignee_</code>.
     */
    public final TableField<ActHiActinstRecord, String> ASSIGNEE_ = createField(DSL.name("assignee_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_actinst.start_time_</code>.
     */
    public final TableField<ActHiActinstRecord, LocalDateTime> START_TIME_ = createField(DSL.name("start_time_"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_actinst.end_time_</code>.
     */
    public final TableField<ActHiActinstRecord, LocalDateTime> END_TIME_ = createField(DSL.name("end_time_"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>greygold.act_hi_actinst.duration_</code>.
     */
    public final TableField<ActHiActinstRecord, Long> DURATION_ = createField(DSL.name("duration_"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>greygold.act_hi_actinst.act_inst_state_</code>.
     */
    public final TableField<ActHiActinstRecord, Integer> ACT_INST_STATE_ = createField(DSL.name("act_inst_state_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_hi_actinst.sequence_counter_</code>.
     */
    public final TableField<ActHiActinstRecord, Long> SEQUENCE_COUNTER_ = createField(DSL.name("sequence_counter_"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>greygold.act_hi_actinst.tenant_id_</code>.
     */
    public final TableField<ActHiActinstRecord, String> TENANT_ID_ = createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_actinst.removal_time_</code>.
     */
    public final TableField<ActHiActinstRecord, LocalDateTime> REMOVAL_TIME_ = createField(DSL.name("removal_time_"), SQLDataType.LOCALDATETIME(6), this, "");

    private ActHiActinst(Name alias, Table<ActHiActinstRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActHiActinst(Name alias, Table<ActHiActinstRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>greygold.act_hi_actinst</code> table reference
     */
    public ActHiActinst(String alias) {
        this(DSL.name(alias), ACT_HI_ACTINST);
    }

    /**
     * Create an aliased <code>greygold.act_hi_actinst</code> table reference
     */
    public ActHiActinst(Name alias) {
        this(alias, ACT_HI_ACTINST);
    }

    /**
     * Create a <code>greygold.act_hi_actinst</code> table reference
     */
    public ActHiActinst() {
        this(DSL.name("act_hi_actinst"), null);
    }

    public <O extends Record> ActHiActinst(Table<O> child, ForeignKey<O, ActHiActinstRecord> key) {
        super(child, key, ACT_HI_ACTINST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Greygold.GREYGOLD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACT_IDX_HI_ACT_INST_COMP, Indexes.ACT_IDX_HI_ACT_INST_END, Indexes.ACT_IDX_HI_ACT_INST_PROC_DEF_KEY, Indexes.ACT_IDX_HI_ACT_INST_PROCINST, Indexes.ACT_IDX_HI_ACT_INST_RM_TIME, Indexes.ACT_IDX_HI_ACT_INST_START_END, Indexes.ACT_IDX_HI_ACT_INST_STATS, Indexes.ACT_IDX_HI_ACT_INST_TENANT_ID, Indexes.ACT_IDX_HI_ACTINST_ROOT_PI, Indexes.ACT_IDX_HI_AI_PDEFID_END_TIME);
    }

    @Override
    public UniqueKey<ActHiActinstRecord> getPrimaryKey() {
        return Keys.ACT_HI_ACTINST_PKEY;
    }

    @Override
    public ActHiActinst as(String alias) {
        return new ActHiActinst(DSL.name(alias), this);
    }

    @Override
    public ActHiActinst as(Name alias) {
        return new ActHiActinst(alias, this);
    }

    @Override
    public ActHiActinst as(Table<?> alias) {
        return new ActHiActinst(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiActinst rename(String name) {
        return new ActHiActinst(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiActinst rename(Name name) {
        return new ActHiActinst(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiActinst rename(Table<?> name) {
        return new ActHiActinst(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<String, String, String, String, String, String, String, String, String, String, String, String, String, String, LocalDateTime, LocalDateTime, Long, Integer, Long, String, LocalDateTime> fieldsRow() {
        return (Row21) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function21<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super Long, ? super Integer, ? super Long, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function21<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super Long, ? super Integer, ? super Long, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
