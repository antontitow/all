/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tito.jooq.Greygold;
import ru.tito.jooq.Indexes;
import ru.tito.jooq.Keys;
import ru.tito.jooq.tables.records.ActRuEventSubscrRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActRuEventSubscr extends TableImpl<ActRuEventSubscrRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>greygold.act_ru_event_subscr</code>
     */
    public static final ActRuEventSubscr ACT_RU_EVENT_SUBSCR = new ActRuEventSubscr();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActRuEventSubscrRecord> getRecordType() {
        return ActRuEventSubscrRecord.class;
    }

    /**
     * The column <code>greygold.act_ru_event_subscr.id_</code>.
     */
    public final TableField<ActRuEventSubscrRecord, String> ID_ = createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_ru_event_subscr.rev_</code>.
     */
    public final TableField<ActRuEventSubscrRecord, Integer> REV_ = createField(DSL.name("rev_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_ru_event_subscr.event_type_</code>.
     */
    public final TableField<ActRuEventSubscrRecord, String> EVENT_TYPE_ = createField(DSL.name("event_type_"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>greygold.act_ru_event_subscr.event_name_</code>.
     */
    public final TableField<ActRuEventSubscrRecord, String> EVENT_NAME_ = createField(DSL.name("event_name_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_ru_event_subscr.execution_id_</code>.
     */
    public final TableField<ActRuEventSubscrRecord, String> EXECUTION_ID_ = createField(DSL.name("execution_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_event_subscr.proc_inst_id_</code>.
     */
    public final TableField<ActRuEventSubscrRecord, String> PROC_INST_ID_ = createField(DSL.name("proc_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_event_subscr.activity_id_</code>.
     */
    public final TableField<ActRuEventSubscrRecord, String> ACTIVITY_ID_ = createField(DSL.name("activity_id_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_ru_event_subscr.configuration_</code>.
     */
    public final TableField<ActRuEventSubscrRecord, String> CONFIGURATION_ = createField(DSL.name("configuration_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_ru_event_subscr.created_</code>.
     */
    public final TableField<ActRuEventSubscrRecord, LocalDateTime> CREATED_ = createField(DSL.name("created_"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>greygold.act_ru_event_subscr.tenant_id_</code>.
     */
    public final TableField<ActRuEventSubscrRecord, String> TENANT_ID_ = createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "");

    private ActRuEventSubscr(Name alias, Table<ActRuEventSubscrRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActRuEventSubscr(Name alias, Table<ActRuEventSubscrRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>greygold.act_ru_event_subscr</code> table
     * reference
     */
    public ActRuEventSubscr(String alias) {
        this(DSL.name(alias), ACT_RU_EVENT_SUBSCR);
    }

    /**
     * Create an aliased <code>greygold.act_ru_event_subscr</code> table
     * reference
     */
    public ActRuEventSubscr(Name alias) {
        this(alias, ACT_RU_EVENT_SUBSCR);
    }

    /**
     * Create a <code>greygold.act_ru_event_subscr</code> table reference
     */
    public ActRuEventSubscr() {
        this(DSL.name("act_ru_event_subscr"), null);
    }

    public <O extends Record> ActRuEventSubscr(Table<O> child, ForeignKey<O, ActRuEventSubscrRecord> key) {
        super(child, key, ACT_RU_EVENT_SUBSCR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Greygold.GREYGOLD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACT_IDX_EVENT_SUBSCR, Indexes.ACT_IDX_EVENT_SUBSCR_CONFIG_, Indexes.ACT_IDX_EVENT_SUBSCR_EVT_NAME, Indexes.ACT_IDX_EVENT_SUBSCR_TENANT_ID);
    }

    @Override
    public UniqueKey<ActRuEventSubscrRecord> getPrimaryKey() {
        return Keys.ACT_RU_EVENT_SUBSCR_PKEY;
    }

    @Override
    public List<ForeignKey<ActRuEventSubscrRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACT_RU_EVENT_SUBSCR__ACT_FK_EVENT_EXEC);
    }

    private transient ActRuExecution _actRuExecution;

    /**
     * Get the implicit join path to the <code>greygold.act_ru_execution</code>
     * table.
     */
    public ActRuExecution actRuExecution() {
        if (_actRuExecution == null)
            _actRuExecution = new ActRuExecution(this, Keys.ACT_RU_EVENT_SUBSCR__ACT_FK_EVENT_EXEC);

        return _actRuExecution;
    }

    @Override
    public ActRuEventSubscr as(String alias) {
        return new ActRuEventSubscr(DSL.name(alias), this);
    }

    @Override
    public ActRuEventSubscr as(Name alias) {
        return new ActRuEventSubscr(alias, this);
    }

    @Override
    public ActRuEventSubscr as(Table<?> alias) {
        return new ActRuEventSubscr(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuEventSubscr rename(String name) {
        return new ActRuEventSubscr(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuEventSubscr rename(Name name) {
        return new ActRuEventSubscr(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuEventSubscr rename(Table<?> name) {
        return new ActRuEventSubscr(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, Integer, String, String, String, String, String, String, LocalDateTime, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
