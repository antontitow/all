/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tito.jooq.Greygold;
import ru.tito.jooq.Indexes;
import ru.tito.jooq.Keys;
import ru.tito.jooq.tables.records.ActHiCommentRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActHiComment extends TableImpl<ActHiCommentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>greygold.act_hi_comment</code>
     */
    public static final ActHiComment ACT_HI_COMMENT = new ActHiComment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActHiCommentRecord> getRecordType() {
        return ActHiCommentRecord.class;
    }

    /**
     * The column <code>greygold.act_hi_comment.id_</code>.
     */
    public final TableField<ActHiCommentRecord, String> ID_ = createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_comment.type_</code>.
     */
    public final TableField<ActHiCommentRecord, String> TYPE_ = createField(DSL.name("type_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_comment.time_</code>.
     */
    public final TableField<ActHiCommentRecord, LocalDateTime> TIME_ = createField(DSL.name("time_"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_comment.user_id_</code>.
     */
    public final TableField<ActHiCommentRecord, String> USER_ID_ = createField(DSL.name("user_id_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_comment.task_id_</code>.
     */
    public final TableField<ActHiCommentRecord, String> TASK_ID_ = createField(DSL.name("task_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_comment.root_proc_inst_id_</code>.
     */
    public final TableField<ActHiCommentRecord, String> ROOT_PROC_INST_ID_ = createField(DSL.name("root_proc_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_comment.proc_inst_id_</code>.
     */
    public final TableField<ActHiCommentRecord, String> PROC_INST_ID_ = createField(DSL.name("proc_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_comment.action_</code>.
     */
    public final TableField<ActHiCommentRecord, String> ACTION_ = createField(DSL.name("action_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_comment.message_</code>.
     */
    public final TableField<ActHiCommentRecord, String> MESSAGE_ = createField(DSL.name("message_"), SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>greygold.act_hi_comment.full_msg_</code>.
     */
    public final TableField<ActHiCommentRecord, byte[]> FULL_MSG_ = createField(DSL.name("full_msg_"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>greygold.act_hi_comment.tenant_id_</code>.
     */
    public final TableField<ActHiCommentRecord, String> TENANT_ID_ = createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_comment.removal_time_</code>.
     */
    public final TableField<ActHiCommentRecord, LocalDateTime> REMOVAL_TIME_ = createField(DSL.name("removal_time_"), SQLDataType.LOCALDATETIME(6), this, "");

    private ActHiComment(Name alias, Table<ActHiCommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActHiComment(Name alias, Table<ActHiCommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>greygold.act_hi_comment</code> table reference
     */
    public ActHiComment(String alias) {
        this(DSL.name(alias), ACT_HI_COMMENT);
    }

    /**
     * Create an aliased <code>greygold.act_hi_comment</code> table reference
     */
    public ActHiComment(Name alias) {
        this(alias, ACT_HI_COMMENT);
    }

    /**
     * Create a <code>greygold.act_hi_comment</code> table reference
     */
    public ActHiComment() {
        this(DSL.name("act_hi_comment"), null);
    }

    public <O extends Record> ActHiComment(Table<O> child, ForeignKey<O, ActHiCommentRecord> key) {
        super(child, key, ACT_HI_COMMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Greygold.GREYGOLD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACT_IDX_HI_COMMENT_PROCINST, Indexes.ACT_IDX_HI_COMMENT_RM_TIME, Indexes.ACT_IDX_HI_COMMENT_ROOT_PI, Indexes.ACT_IDX_HI_COMMENT_TASK);
    }

    @Override
    public UniqueKey<ActHiCommentRecord> getPrimaryKey() {
        return Keys.ACT_HI_COMMENT_PKEY;
    }

    @Override
    public ActHiComment as(String alias) {
        return new ActHiComment(DSL.name(alias), this);
    }

    @Override
    public ActHiComment as(Name alias) {
        return new ActHiComment(alias, this);
    }

    @Override
    public ActHiComment as(Table<?> alias) {
        return new ActHiComment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiComment rename(String name) {
        return new ActHiComment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiComment rename(Name name) {
        return new ActHiComment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiComment rename(Table<?> name) {
        return new ActHiComment(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, String, LocalDateTime, String, String, String, String, String, String, byte[], String, LocalDateTime> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super String, ? super String, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super byte[], ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super String, ? super String, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super byte[], ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
