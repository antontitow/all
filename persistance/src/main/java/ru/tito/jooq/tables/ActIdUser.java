/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tito.jooq.Greygold;
import ru.tito.jooq.Keys;
import ru.tito.jooq.tables.records.ActIdUserRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActIdUser extends TableImpl<ActIdUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>greygold.act_id_user</code>
     */
    public static final ActIdUser ACT_ID_USER = new ActIdUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActIdUserRecord> getRecordType() {
        return ActIdUserRecord.class;
    }

    /**
     * The column <code>greygold.act_id_user.id_</code>.
     */
    public final TableField<ActIdUserRecord, String> ID_ = createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_id_user.rev_</code>.
     */
    public final TableField<ActIdUserRecord, Integer> REV_ = createField(DSL.name("rev_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_id_user.first_</code>.
     */
    public final TableField<ActIdUserRecord, String> FIRST_ = createField(DSL.name("first_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_id_user.last_</code>.
     */
    public final TableField<ActIdUserRecord, String> LAST_ = createField(DSL.name("last_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_id_user.email_</code>.
     */
    public final TableField<ActIdUserRecord, String> EMAIL_ = createField(DSL.name("email_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_id_user.pwd_</code>.
     */
    public final TableField<ActIdUserRecord, String> PWD_ = createField(DSL.name("pwd_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_id_user.salt_</code>.
     */
    public final TableField<ActIdUserRecord, String> SALT_ = createField(DSL.name("salt_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_id_user.lock_exp_time_</code>.
     */
    public final TableField<ActIdUserRecord, LocalDateTime> LOCK_EXP_TIME_ = createField(DSL.name("lock_exp_time_"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>greygold.act_id_user.attempts_</code>.
     */
    public final TableField<ActIdUserRecord, Integer> ATTEMPTS_ = createField(DSL.name("attempts_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_id_user.picture_id_</code>.
     */
    public final TableField<ActIdUserRecord, String> PICTURE_ID_ = createField(DSL.name("picture_id_"), SQLDataType.VARCHAR(64), this, "");

    private ActIdUser(Name alias, Table<ActIdUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActIdUser(Name alias, Table<ActIdUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>greygold.act_id_user</code> table reference
     */
    public ActIdUser(String alias) {
        this(DSL.name(alias), ACT_ID_USER);
    }

    /**
     * Create an aliased <code>greygold.act_id_user</code> table reference
     */
    public ActIdUser(Name alias) {
        this(alias, ACT_ID_USER);
    }

    /**
     * Create a <code>greygold.act_id_user</code> table reference
     */
    public ActIdUser() {
        this(DSL.name("act_id_user"), null);
    }

    public <O extends Record> ActIdUser(Table<O> child, ForeignKey<O, ActIdUserRecord> key) {
        super(child, key, ACT_ID_USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Greygold.GREYGOLD;
    }

    @Override
    public UniqueKey<ActIdUserRecord> getPrimaryKey() {
        return Keys.ACT_ID_USER_PKEY;
    }

    @Override
    public ActIdUser as(String alias) {
        return new ActIdUser(DSL.name(alias), this);
    }

    @Override
    public ActIdUser as(Name alias) {
        return new ActIdUser(alias, this);
    }

    @Override
    public ActIdUser as(Table<?> alias) {
        return new ActIdUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActIdUser rename(String name) {
        return new ActIdUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActIdUser rename(Name name) {
        return new ActIdUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActIdUser rename(Table<?> name) {
        return new ActIdUser(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, Integer, String, String, String, String, String, LocalDateTime, Integer, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
