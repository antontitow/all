/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables;


import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tito.jooq.Greygold;
import ru.tito.jooq.Keys;
import ru.tito.jooq.tables.records.WhyRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Why extends TableImpl<WhyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>greygold.why</code>
     */
    public static final Why WHY = new Why();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WhyRecord> getRecordType() {
        return WhyRecord.class;
    }

    /**
     * The column <code>greygold.why.id</code>.
     */
    public final TableField<WhyRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>greygold.why.drive</code>.
     */
    public final TableField<WhyRecord, String> DRIVE = createField(DSL.name("drive"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.why.egypt</code>.
     */
    public final TableField<WhyRecord, String> EGYPT = createField(DSL.name("egypt"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.why.innn</code>.
     */
    public final TableField<WhyRecord, String> INNN = createField(DSL.name("innn"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.why.ton</code>.
     */
    public final TableField<WhyRecord, String> TON = createField(DSL.name("ton"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.why.whenn</code>.
     */
    public final TableField<WhyRecord, String> WHENN = createField(DSL.name("whenn"), SQLDataType.VARCHAR(255), this, "");

    private Why(Name alias, Table<WhyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Why(Name alias, Table<WhyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>greygold.why</code> table reference
     */
    public Why(String alias) {
        this(DSL.name(alias), WHY);
    }

    /**
     * Create an aliased <code>greygold.why</code> table reference
     */
    public Why(Name alias) {
        this(alias, WHY);
    }

    /**
     * Create a <code>greygold.why</code> table reference
     */
    public Why() {
        this(DSL.name("why"), null);
    }

    public <O extends Record> Why(Table<O> child, ForeignKey<O, WhyRecord> key) {
        super(child, key, WHY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Greygold.GREYGOLD;
    }

    @Override
    public UniqueKey<WhyRecord> getPrimaryKey() {
        return Keys.WHY_PKEY;
    }

    @Override
    public Why as(String alias) {
        return new Why(DSL.name(alias), this);
    }

    @Override
    public Why as(Name alias) {
        return new Why(alias, this);
    }

    @Override
    public Why as(Table<?> alias) {
        return new Why(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Why rename(String name) {
        return new Why(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Why rename(Name name) {
        return new Why(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Why rename(Table<?> name) {
        return new Why(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
