/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables;


import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tito.jooq.Greygold;
import ru.tito.jooq.Keys;
import ru.tito.jooq.tables.records.ActIdGroupRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActIdGroup extends TableImpl<ActIdGroupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>greygold.act_id_group</code>
     */
    public static final ActIdGroup ACT_ID_GROUP = new ActIdGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActIdGroupRecord> getRecordType() {
        return ActIdGroupRecord.class;
    }

    /**
     * The column <code>greygold.act_id_group.id_</code>.
     */
    public final TableField<ActIdGroupRecord, String> ID_ = createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_id_group.rev_</code>.
     */
    public final TableField<ActIdGroupRecord, Integer> REV_ = createField(DSL.name("rev_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_id_group.name_</code>.
     */
    public final TableField<ActIdGroupRecord, String> NAME_ = createField(DSL.name("name_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_id_group.type_</code>.
     */
    public final TableField<ActIdGroupRecord, String> TYPE_ = createField(DSL.name("type_"), SQLDataType.VARCHAR(255), this, "");

    private ActIdGroup(Name alias, Table<ActIdGroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActIdGroup(Name alias, Table<ActIdGroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>greygold.act_id_group</code> table reference
     */
    public ActIdGroup(String alias) {
        this(DSL.name(alias), ACT_ID_GROUP);
    }

    /**
     * Create an aliased <code>greygold.act_id_group</code> table reference
     */
    public ActIdGroup(Name alias) {
        this(alias, ACT_ID_GROUP);
    }

    /**
     * Create a <code>greygold.act_id_group</code> table reference
     */
    public ActIdGroup() {
        this(DSL.name("act_id_group"), null);
    }

    public <O extends Record> ActIdGroup(Table<O> child, ForeignKey<O, ActIdGroupRecord> key) {
        super(child, key, ACT_ID_GROUP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Greygold.GREYGOLD;
    }

    @Override
    public UniqueKey<ActIdGroupRecord> getPrimaryKey() {
        return Keys.ACT_ID_GROUP_PKEY;
    }

    @Override
    public ActIdGroup as(String alias) {
        return new ActIdGroup(DSL.name(alias), this);
    }

    @Override
    public ActIdGroup as(Name alias) {
        return new ActIdGroup(alias, this);
    }

    @Override
    public ActIdGroup as(Table<?> alias) {
        return new ActIdGroup(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActIdGroup rename(String name) {
        return new ActIdGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActIdGroup rename(Name name) {
        return new ActIdGroup(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActIdGroup rename(Table<?> name) {
        return new ActIdGroup(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, Integer, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
