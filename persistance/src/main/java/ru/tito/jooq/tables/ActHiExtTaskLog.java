/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function19;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tito.jooq.Greygold;
import ru.tito.jooq.Indexes;
import ru.tito.jooq.Keys;
import ru.tito.jooq.tables.records.ActHiExtTaskLogRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActHiExtTaskLog extends TableImpl<ActHiExtTaskLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>greygold.act_hi_ext_task_log</code>
     */
    public static final ActHiExtTaskLog ACT_HI_EXT_TASK_LOG = new ActHiExtTaskLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActHiExtTaskLogRecord> getRecordType() {
        return ActHiExtTaskLogRecord.class;
    }

    /**
     * The column <code>greygold.act_hi_ext_task_log.id_</code>.
     */
    public final TableField<ActHiExtTaskLogRecord, String> ID_ = createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_ext_task_log.timestamp_</code>.
     */
    public final TableField<ActHiExtTaskLogRecord, LocalDateTime> TIMESTAMP_ = createField(DSL.name("timestamp_"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_ext_task_log.ext_task_id_</code>.
     */
    public final TableField<ActHiExtTaskLogRecord, String> EXT_TASK_ID_ = createField(DSL.name("ext_task_id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_ext_task_log.retries_</code>.
     */
    public final TableField<ActHiExtTaskLogRecord, Integer> RETRIES_ = createField(DSL.name("retries_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_hi_ext_task_log.topic_name_</code>.
     */
    public final TableField<ActHiExtTaskLogRecord, String> TOPIC_NAME_ = createField(DSL.name("topic_name_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_ext_task_log.worker_id_</code>.
     */
    public final TableField<ActHiExtTaskLogRecord, String> WORKER_ID_ = createField(DSL.name("worker_id_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_ext_task_log.priority_</code>.
     */
    public final TableField<ActHiExtTaskLogRecord, Long> PRIORITY_ = createField(DSL.name("priority_"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>greygold.act_hi_ext_task_log.error_msg_</code>.
     */
    public final TableField<ActHiExtTaskLogRecord, String> ERROR_MSG_ = createField(DSL.name("error_msg_"), SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>greygold.act_hi_ext_task_log.error_details_id_</code>.
     */
    public final TableField<ActHiExtTaskLogRecord, String> ERROR_DETAILS_ID_ = createField(DSL.name("error_details_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_ext_task_log.act_id_</code>.
     */
    public final TableField<ActHiExtTaskLogRecord, String> ACT_ID_ = createField(DSL.name("act_id_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_ext_task_log.act_inst_id_</code>.
     */
    public final TableField<ActHiExtTaskLogRecord, String> ACT_INST_ID_ = createField(DSL.name("act_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_ext_task_log.execution_id_</code>.
     */
    public final TableField<ActHiExtTaskLogRecord, String> EXECUTION_ID_ = createField(DSL.name("execution_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_ext_task_log.proc_inst_id_</code>.
     */
    public final TableField<ActHiExtTaskLogRecord, String> PROC_INST_ID_ = createField(DSL.name("proc_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_ext_task_log.root_proc_inst_id_</code>.
     */
    public final TableField<ActHiExtTaskLogRecord, String> ROOT_PROC_INST_ID_ = createField(DSL.name("root_proc_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_ext_task_log.proc_def_id_</code>.
     */
    public final TableField<ActHiExtTaskLogRecord, String> PROC_DEF_ID_ = createField(DSL.name("proc_def_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_ext_task_log.proc_def_key_</code>.
     */
    public final TableField<ActHiExtTaskLogRecord, String> PROC_DEF_KEY_ = createField(DSL.name("proc_def_key_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_ext_task_log.tenant_id_</code>.
     */
    public final TableField<ActHiExtTaskLogRecord, String> TENANT_ID_ = createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_ext_task_log.state_</code>.
     */
    public final TableField<ActHiExtTaskLogRecord, Integer> STATE_ = createField(DSL.name("state_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_hi_ext_task_log.removal_time_</code>.
     */
    public final TableField<ActHiExtTaskLogRecord, LocalDateTime> REMOVAL_TIME_ = createField(DSL.name("removal_time_"), SQLDataType.LOCALDATETIME(6), this, "");

    private ActHiExtTaskLog(Name alias, Table<ActHiExtTaskLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActHiExtTaskLog(Name alias, Table<ActHiExtTaskLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>greygold.act_hi_ext_task_log</code> table
     * reference
     */
    public ActHiExtTaskLog(String alias) {
        this(DSL.name(alias), ACT_HI_EXT_TASK_LOG);
    }

    /**
     * Create an aliased <code>greygold.act_hi_ext_task_log</code> table
     * reference
     */
    public ActHiExtTaskLog(Name alias) {
        this(alias, ACT_HI_EXT_TASK_LOG);
    }

    /**
     * Create a <code>greygold.act_hi_ext_task_log</code> table reference
     */
    public ActHiExtTaskLog() {
        this(DSL.name("act_hi_ext_task_log"), null);
    }

    public <O extends Record> ActHiExtTaskLog(Table<O> child, ForeignKey<O, ActHiExtTaskLogRecord> key) {
        super(child, key, ACT_HI_EXT_TASK_LOG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Greygold.GREYGOLD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACT_HI_EXT_TASK_LOG_PROC_DEF_KEY, Indexes.ACT_HI_EXT_TASK_LOG_PROCDEF, Indexes.ACT_HI_EXT_TASK_LOG_PROCINST, Indexes.ACT_HI_EXT_TASK_LOG_RM_TIME, Indexes.ACT_HI_EXT_TASK_LOG_ROOT_PI, Indexes.ACT_HI_EXT_TASK_LOG_TENANT_ID, Indexes.ACT_IDX_HI_EXTTASKLOG_ERRORDET);
    }

    @Override
    public UniqueKey<ActHiExtTaskLogRecord> getPrimaryKey() {
        return Keys.ACT_HI_EXT_TASK_LOG_PKEY;
    }

    @Override
    public ActHiExtTaskLog as(String alias) {
        return new ActHiExtTaskLog(DSL.name(alias), this);
    }

    @Override
    public ActHiExtTaskLog as(Name alias) {
        return new ActHiExtTaskLog(alias, this);
    }

    @Override
    public ActHiExtTaskLog as(Table<?> alias) {
        return new ActHiExtTaskLog(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiExtTaskLog rename(String name) {
        return new ActHiExtTaskLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiExtTaskLog rename(Name name) {
        return new ActHiExtTaskLog(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiExtTaskLog rename(Table<?> name) {
        return new ActHiExtTaskLog(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<String, LocalDateTime, String, Integer, String, String, Long, String, String, String, String, String, String, String, String, String, String, Integer, LocalDateTime> fieldsRow() {
        return (Row19) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function19<? super String, ? super LocalDateTime, ? super String, ? super Integer, ? super String, ? super String, ? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function19<? super String, ? super LocalDateTime, ? super String, ? super Integer, ? super String, ? super String, ? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
