/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tito.jooq.Greygold;
import ru.tito.jooq.Indexes;
import ru.tito.jooq.Keys;
import ru.tito.jooq.tables.records.ActHiBatchRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActHiBatch extends TableImpl<ActHiBatchRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>greygold.act_hi_batch</code>
     */
    public static final ActHiBatch ACT_HI_BATCH = new ActHiBatch();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActHiBatchRecord> getRecordType() {
        return ActHiBatchRecord.class;
    }

    /**
     * The column <code>greygold.act_hi_batch.id_</code>.
     */
    public final TableField<ActHiBatchRecord, String> ID_ = createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_batch.type_</code>.
     */
    public final TableField<ActHiBatchRecord, String> TYPE_ = createField(DSL.name("type_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_batch.total_jobs_</code>.
     */
    public final TableField<ActHiBatchRecord, Integer> TOTAL_JOBS_ = createField(DSL.name("total_jobs_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_hi_batch.jobs_per_seed_</code>.
     */
    public final TableField<ActHiBatchRecord, Integer> JOBS_PER_SEED_ = createField(DSL.name("jobs_per_seed_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_hi_batch.invocations_per_job_</code>.
     */
    public final TableField<ActHiBatchRecord, Integer> INVOCATIONS_PER_JOB_ = createField(DSL.name("invocations_per_job_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_hi_batch.seed_job_def_id_</code>.
     */
    public final TableField<ActHiBatchRecord, String> SEED_JOB_DEF_ID_ = createField(DSL.name("seed_job_def_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_batch.monitor_job_def_id_</code>.
     */
    public final TableField<ActHiBatchRecord, String> MONITOR_JOB_DEF_ID_ = createField(DSL.name("monitor_job_def_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_batch.batch_job_def_id_</code>.
     */
    public final TableField<ActHiBatchRecord, String> BATCH_JOB_DEF_ID_ = createField(DSL.name("batch_job_def_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_batch.tenant_id_</code>.
     */
    public final TableField<ActHiBatchRecord, String> TENANT_ID_ = createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_batch.create_user_id_</code>.
     */
    public final TableField<ActHiBatchRecord, String> CREATE_USER_ID_ = createField(DSL.name("create_user_id_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_batch.start_time_</code>.
     */
    public final TableField<ActHiBatchRecord, LocalDateTime> START_TIME_ = createField(DSL.name("start_time_"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_batch.end_time_</code>.
     */
    public final TableField<ActHiBatchRecord, LocalDateTime> END_TIME_ = createField(DSL.name("end_time_"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>greygold.act_hi_batch.removal_time_</code>.
     */
    public final TableField<ActHiBatchRecord, LocalDateTime> REMOVAL_TIME_ = createField(DSL.name("removal_time_"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>greygold.act_hi_batch.exec_start_time_</code>.
     */
    public final TableField<ActHiBatchRecord, LocalDateTime> EXEC_START_TIME_ = createField(DSL.name("exec_start_time_"), SQLDataType.LOCALDATETIME(6), this, "");

    private ActHiBatch(Name alias, Table<ActHiBatchRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActHiBatch(Name alias, Table<ActHiBatchRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>greygold.act_hi_batch</code> table reference
     */
    public ActHiBatch(String alias) {
        this(DSL.name(alias), ACT_HI_BATCH);
    }

    /**
     * Create an aliased <code>greygold.act_hi_batch</code> table reference
     */
    public ActHiBatch(Name alias) {
        this(alias, ACT_HI_BATCH);
    }

    /**
     * Create a <code>greygold.act_hi_batch</code> table reference
     */
    public ActHiBatch() {
        this(DSL.name("act_hi_batch"), null);
    }

    public <O extends Record> ActHiBatch(Table<O> child, ForeignKey<O, ActHiBatchRecord> key) {
        super(child, key, ACT_HI_BATCH);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Greygold.GREYGOLD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACT_HI_BAT_RM_TIME);
    }

    @Override
    public UniqueKey<ActHiBatchRecord> getPrimaryKey() {
        return Keys.ACT_HI_BATCH_PKEY;
    }

    @Override
    public ActHiBatch as(String alias) {
        return new ActHiBatch(DSL.name(alias), this);
    }

    @Override
    public ActHiBatch as(Name alias) {
        return new ActHiBatch(alias, this);
    }

    @Override
    public ActHiBatch as(Table<?> alias) {
        return new ActHiBatch(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiBatch rename(String name) {
        return new ActHiBatch(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiBatch rename(Name name) {
        return new ActHiBatch(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiBatch rename(Table<?> name) {
        return new ActHiBatch(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<String, String, Integer, Integer, Integer, String, String, String, String, String, LocalDateTime, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super String, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super String, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
