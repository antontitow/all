/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function19;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tito.jooq.Greygold;
import ru.tito.jooq.Indexes;
import ru.tito.jooq.Keys;
import ru.tito.jooq.tables.records.ActHiProcinstRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActHiProcinst extends TableImpl<ActHiProcinstRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>greygold.act_hi_procinst</code>
     */
    public static final ActHiProcinst ACT_HI_PROCINST = new ActHiProcinst();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActHiProcinstRecord> getRecordType() {
        return ActHiProcinstRecord.class;
    }

    /**
     * The column <code>greygold.act_hi_procinst.id_</code>.
     */
    public final TableField<ActHiProcinstRecord, String> ID_ = createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_procinst.proc_inst_id_</code>.
     */
    public final TableField<ActHiProcinstRecord, String> PROC_INST_ID_ = createField(DSL.name("proc_inst_id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_procinst.business_key_</code>.
     */
    public final TableField<ActHiProcinstRecord, String> BUSINESS_KEY_ = createField(DSL.name("business_key_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_procinst.proc_def_key_</code>.
     */
    public final TableField<ActHiProcinstRecord, String> PROC_DEF_KEY_ = createField(DSL.name("proc_def_key_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_procinst.proc_def_id_</code>.
     */
    public final TableField<ActHiProcinstRecord, String> PROC_DEF_ID_ = createField(DSL.name("proc_def_id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_procinst.start_time_</code>.
     */
    public final TableField<ActHiProcinstRecord, LocalDateTime> START_TIME_ = createField(DSL.name("start_time_"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_procinst.end_time_</code>.
     */
    public final TableField<ActHiProcinstRecord, LocalDateTime> END_TIME_ = createField(DSL.name("end_time_"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>greygold.act_hi_procinst.removal_time_</code>.
     */
    public final TableField<ActHiProcinstRecord, LocalDateTime> REMOVAL_TIME_ = createField(DSL.name("removal_time_"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>greygold.act_hi_procinst.duration_</code>.
     */
    public final TableField<ActHiProcinstRecord, Long> DURATION_ = createField(DSL.name("duration_"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>greygold.act_hi_procinst.start_user_id_</code>.
     */
    public final TableField<ActHiProcinstRecord, String> START_USER_ID_ = createField(DSL.name("start_user_id_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_procinst.start_act_id_</code>.
     */
    public final TableField<ActHiProcinstRecord, String> START_ACT_ID_ = createField(DSL.name("start_act_id_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_procinst.end_act_id_</code>.
     */
    public final TableField<ActHiProcinstRecord, String> END_ACT_ID_ = createField(DSL.name("end_act_id_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>greygold.act_hi_procinst.super_process_instance_id_</code>.
     */
    public final TableField<ActHiProcinstRecord, String> SUPER_PROCESS_INSTANCE_ID_ = createField(DSL.name("super_process_instance_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_procinst.root_proc_inst_id_</code>.
     */
    public final TableField<ActHiProcinstRecord, String> ROOT_PROC_INST_ID_ = createField(DSL.name("root_proc_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_procinst.super_case_instance_id_</code>.
     */
    public final TableField<ActHiProcinstRecord, String> SUPER_CASE_INSTANCE_ID_ = createField(DSL.name("super_case_instance_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_procinst.case_inst_id_</code>.
     */
    public final TableField<ActHiProcinstRecord, String> CASE_INST_ID_ = createField(DSL.name("case_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_procinst.delete_reason_</code>.
     */
    public final TableField<ActHiProcinstRecord, String> DELETE_REASON_ = createField(DSL.name("delete_reason_"), SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>greygold.act_hi_procinst.tenant_id_</code>.
     */
    public final TableField<ActHiProcinstRecord, String> TENANT_ID_ = createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_procinst.state_</code>.
     */
    public final TableField<ActHiProcinstRecord, String> STATE_ = createField(DSL.name("state_"), SQLDataType.VARCHAR(255), this, "");

    private ActHiProcinst(Name alias, Table<ActHiProcinstRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActHiProcinst(Name alias, Table<ActHiProcinstRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>greygold.act_hi_procinst</code> table reference
     */
    public ActHiProcinst(String alias) {
        this(DSL.name(alias), ACT_HI_PROCINST);
    }

    /**
     * Create an aliased <code>greygold.act_hi_procinst</code> table reference
     */
    public ActHiProcinst(Name alias) {
        this(alias, ACT_HI_PROCINST);
    }

    /**
     * Create a <code>greygold.act_hi_procinst</code> table reference
     */
    public ActHiProcinst() {
        this(DSL.name("act_hi_procinst"), null);
    }

    public <O extends Record> ActHiProcinst(Table<O> child, ForeignKey<O, ActHiProcinstRecord> key) {
        super(child, key, ACT_HI_PROCINST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Greygold.GREYGOLD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACT_IDX_HI_PI_PDEFID_END_TIME, Indexes.ACT_IDX_HI_PRO_I_BUSKEY, Indexes.ACT_IDX_HI_PRO_INST_END, Indexes.ACT_IDX_HI_PRO_INST_PROC_DEF_KEY, Indexes.ACT_IDX_HI_PRO_INST_PROC_TIME, Indexes.ACT_IDX_HI_PRO_INST_RM_TIME, Indexes.ACT_IDX_HI_PRO_INST_ROOT_PI, Indexes.ACT_IDX_HI_PRO_INST_TENANT_ID);
    }

    @Override
    public UniqueKey<ActHiProcinstRecord> getPrimaryKey() {
        return Keys.ACT_HI_PROCINST_PKEY;
    }

    @Override
    public List<UniqueKey<ActHiProcinstRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ACT_HI_PROCINST_PROC_INST_ID__KEY);
    }

    @Override
    public ActHiProcinst as(String alias) {
        return new ActHiProcinst(DSL.name(alias), this);
    }

    @Override
    public ActHiProcinst as(Name alias) {
        return new ActHiProcinst(alias, this);
    }

    @Override
    public ActHiProcinst as(Table<?> alias) {
        return new ActHiProcinst(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiProcinst rename(String name) {
        return new ActHiProcinst(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiProcinst rename(Name name) {
        return new ActHiProcinst(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiProcinst rename(Table<?> name) {
        return new ActHiProcinst(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<String, String, String, String, String, LocalDateTime, LocalDateTime, LocalDateTime, Long, String, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function19<? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function19<? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
