/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tito.jooq.Greygold;
import ru.tito.jooq.Indexes;
import ru.tito.jooq.Keys;
import ru.tito.jooq.tables.records.ActRuIdentitylinkRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActRuIdentitylink extends TableImpl<ActRuIdentitylinkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>greygold.act_ru_identitylink</code>
     */
    public static final ActRuIdentitylink ACT_RU_IDENTITYLINK = new ActRuIdentitylink();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActRuIdentitylinkRecord> getRecordType() {
        return ActRuIdentitylinkRecord.class;
    }

    /**
     * The column <code>greygold.act_ru_identitylink.id_</code>.
     */
    public final TableField<ActRuIdentitylinkRecord, String> ID_ = createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_ru_identitylink.rev_</code>.
     */
    public final TableField<ActRuIdentitylinkRecord, Integer> REV_ = createField(DSL.name("rev_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_ru_identitylink.group_id_</code>.
     */
    public final TableField<ActRuIdentitylinkRecord, String> GROUP_ID_ = createField(DSL.name("group_id_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_ru_identitylink.type_</code>.
     */
    public final TableField<ActRuIdentitylinkRecord, String> TYPE_ = createField(DSL.name("type_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_ru_identitylink.user_id_</code>.
     */
    public final TableField<ActRuIdentitylinkRecord, String> USER_ID_ = createField(DSL.name("user_id_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_ru_identitylink.task_id_</code>.
     */
    public final TableField<ActRuIdentitylinkRecord, String> TASK_ID_ = createField(DSL.name("task_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_identitylink.proc_def_id_</code>.
     */
    public final TableField<ActRuIdentitylinkRecord, String> PROC_DEF_ID_ = createField(DSL.name("proc_def_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_identitylink.tenant_id_</code>.
     */
    public final TableField<ActRuIdentitylinkRecord, String> TENANT_ID_ = createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "");

    private ActRuIdentitylink(Name alias, Table<ActRuIdentitylinkRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActRuIdentitylink(Name alias, Table<ActRuIdentitylinkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>greygold.act_ru_identitylink</code> table
     * reference
     */
    public ActRuIdentitylink(String alias) {
        this(DSL.name(alias), ACT_RU_IDENTITYLINK);
    }

    /**
     * Create an aliased <code>greygold.act_ru_identitylink</code> table
     * reference
     */
    public ActRuIdentitylink(Name alias) {
        this(alias, ACT_RU_IDENTITYLINK);
    }

    /**
     * Create a <code>greygold.act_ru_identitylink</code> table reference
     */
    public ActRuIdentitylink() {
        this(DSL.name("act_ru_identitylink"), null);
    }

    public <O extends Record> ActRuIdentitylink(Table<O> child, ForeignKey<O, ActRuIdentitylinkRecord> key) {
        super(child, key, ACT_RU_IDENTITYLINK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Greygold.GREYGOLD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACT_IDX_ATHRZ_PROCEDEF, Indexes.ACT_IDX_IDENT_LNK_GROUP, Indexes.ACT_IDX_IDENT_LNK_USER, Indexes.ACT_IDX_TSKASS_TASK);
    }

    @Override
    public UniqueKey<ActRuIdentitylinkRecord> getPrimaryKey() {
        return Keys.ACT_RU_IDENTITYLINK_PKEY;
    }

    @Override
    public List<ForeignKey<ActRuIdentitylinkRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACT_RU_IDENTITYLINK__ACT_FK_TSKASS_TASK, Keys.ACT_RU_IDENTITYLINK__ACT_FK_ATHRZ_PROCEDEF);
    }

    private transient ActRuTask _actRuTask;
    private transient ActReProcdef _actReProcdef;

    /**
     * Get the implicit join path to the <code>greygold.act_ru_task</code>
     * table.
     */
    public ActRuTask actRuTask() {
        if (_actRuTask == null)
            _actRuTask = new ActRuTask(this, Keys.ACT_RU_IDENTITYLINK__ACT_FK_TSKASS_TASK);

        return _actRuTask;
    }

    /**
     * Get the implicit join path to the <code>greygold.act_re_procdef</code>
     * table.
     */
    public ActReProcdef actReProcdef() {
        if (_actReProcdef == null)
            _actReProcdef = new ActReProcdef(this, Keys.ACT_RU_IDENTITYLINK__ACT_FK_ATHRZ_PROCEDEF);

        return _actReProcdef;
    }

    @Override
    public ActRuIdentitylink as(String alias) {
        return new ActRuIdentitylink(DSL.name(alias), this);
    }

    @Override
    public ActRuIdentitylink as(Name alias) {
        return new ActRuIdentitylink(alias, this);
    }

    @Override
    public ActRuIdentitylink as(Table<?> alias) {
        return new ActRuIdentitylink(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuIdentitylink rename(String name) {
        return new ActRuIdentitylink(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuIdentitylink rename(Name name) {
        return new ActRuIdentitylink(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuIdentitylink rename(Table<?> name) {
        return new ActRuIdentitylink(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, Integer, String, String, String, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
