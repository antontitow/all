/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function13;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tito.jooq.Greygold;
import ru.tito.jooq.Indexes;
import ru.tito.jooq.Keys;
import ru.tito.jooq.tables.records.ActRuCaseExecutionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActRuCaseExecution extends TableImpl<ActRuCaseExecutionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>greygold.act_ru_case_execution</code>
     */
    public static final ActRuCaseExecution ACT_RU_CASE_EXECUTION = new ActRuCaseExecution();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActRuCaseExecutionRecord> getRecordType() {
        return ActRuCaseExecutionRecord.class;
    }

    /**
     * The column <code>greygold.act_ru_case_execution.id_</code>.
     */
    public final TableField<ActRuCaseExecutionRecord, String> ID_ = createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_ru_case_execution.rev_</code>.
     */
    public final TableField<ActRuCaseExecutionRecord, Integer> REV_ = createField(DSL.name("rev_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_ru_case_execution.case_inst_id_</code>.
     */
    public final TableField<ActRuCaseExecutionRecord, String> CASE_INST_ID_ = createField(DSL.name("case_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_case_execution.super_case_exec_</code>.
     */
    public final TableField<ActRuCaseExecutionRecord, String> SUPER_CASE_EXEC_ = createField(DSL.name("super_case_exec_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_case_execution.super_exec_</code>.
     */
    public final TableField<ActRuCaseExecutionRecord, String> SUPER_EXEC_ = createField(DSL.name("super_exec_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_case_execution.business_key_</code>.
     */
    public final TableField<ActRuCaseExecutionRecord, String> BUSINESS_KEY_ = createField(DSL.name("business_key_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_ru_case_execution.parent_id_</code>.
     */
    public final TableField<ActRuCaseExecutionRecord, String> PARENT_ID_ = createField(DSL.name("parent_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_case_execution.case_def_id_</code>.
     */
    public final TableField<ActRuCaseExecutionRecord, String> CASE_DEF_ID_ = createField(DSL.name("case_def_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_case_execution.act_id_</code>.
     */
    public final TableField<ActRuCaseExecutionRecord, String> ACT_ID_ = createField(DSL.name("act_id_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_ru_case_execution.prev_state_</code>.
     */
    public final TableField<ActRuCaseExecutionRecord, Integer> PREV_STATE_ = createField(DSL.name("prev_state_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_ru_case_execution.current_state_</code>.
     */
    public final TableField<ActRuCaseExecutionRecord, Integer> CURRENT_STATE_ = createField(DSL.name("current_state_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_ru_case_execution.required_</code>.
     */
    public final TableField<ActRuCaseExecutionRecord, Boolean> REQUIRED_ = createField(DSL.name("required_"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>greygold.act_ru_case_execution.tenant_id_</code>.
     */
    public final TableField<ActRuCaseExecutionRecord, String> TENANT_ID_ = createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "");

    private ActRuCaseExecution(Name alias, Table<ActRuCaseExecutionRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActRuCaseExecution(Name alias, Table<ActRuCaseExecutionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>greygold.act_ru_case_execution</code> table
     * reference
     */
    public ActRuCaseExecution(String alias) {
        this(DSL.name(alias), ACT_RU_CASE_EXECUTION);
    }

    /**
     * Create an aliased <code>greygold.act_ru_case_execution</code> table
     * reference
     */
    public ActRuCaseExecution(Name alias) {
        this(alias, ACT_RU_CASE_EXECUTION);
    }

    /**
     * Create a <code>greygold.act_ru_case_execution</code> table reference
     */
    public ActRuCaseExecution() {
        this(DSL.name("act_ru_case_execution"), null);
    }

    public <O extends Record> ActRuCaseExecution(Table<O> child, ForeignKey<O, ActRuCaseExecutionRecord> key) {
        super(child, key, ACT_RU_CASE_EXECUTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Greygold.GREYGOLD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACT_IDX_CASE_EXE_CASE_DEF, Indexes.ACT_IDX_CASE_EXE_CASE_INST, Indexes.ACT_IDX_CASE_EXE_PARENT, Indexes.ACT_IDX_CASE_EXEC_BUSKEY, Indexes.ACT_IDX_CASE_EXEC_TENANT_ID);
    }

    @Override
    public UniqueKey<ActRuCaseExecutionRecord> getPrimaryKey() {
        return Keys.ACT_RU_CASE_EXECUTION_PKEY;
    }

    @Override
    public List<ForeignKey<ActRuCaseExecutionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACT_RU_CASE_EXECUTION__ACT_FK_CASE_EXE_CASE_INST, Keys.ACT_RU_CASE_EXECUTION__ACT_FK_CASE_EXE_PARENT, Keys.ACT_RU_CASE_EXECUTION__ACT_FK_CASE_EXE_CASE_DEF);
    }

    private transient ActRuCaseExecution _actFkCaseExeCaseInst;
    private transient ActRuCaseExecution _actFkCaseExeParent;
    private transient ActReCaseDef _actReCaseDef;

    /**
     * Get the implicit join path to the
     * <code>greygold.act_ru_case_execution</code> table, via the
     * <code>act_fk_case_exe_case_inst</code> key.
     */
    public ActRuCaseExecution actFkCaseExeCaseInst() {
        if (_actFkCaseExeCaseInst == null)
            _actFkCaseExeCaseInst = new ActRuCaseExecution(this, Keys.ACT_RU_CASE_EXECUTION__ACT_FK_CASE_EXE_CASE_INST);

        return _actFkCaseExeCaseInst;
    }

    /**
     * Get the implicit join path to the
     * <code>greygold.act_ru_case_execution</code> table, via the
     * <code>act_fk_case_exe_parent</code> key.
     */
    public ActRuCaseExecution actFkCaseExeParent() {
        if (_actFkCaseExeParent == null)
            _actFkCaseExeParent = new ActRuCaseExecution(this, Keys.ACT_RU_CASE_EXECUTION__ACT_FK_CASE_EXE_PARENT);

        return _actFkCaseExeParent;
    }

    /**
     * Get the implicit join path to the <code>greygold.act_re_case_def</code>
     * table.
     */
    public ActReCaseDef actReCaseDef() {
        if (_actReCaseDef == null)
            _actReCaseDef = new ActReCaseDef(this, Keys.ACT_RU_CASE_EXECUTION__ACT_FK_CASE_EXE_CASE_DEF);

        return _actReCaseDef;
    }

    @Override
    public ActRuCaseExecution as(String alias) {
        return new ActRuCaseExecution(DSL.name(alias), this);
    }

    @Override
    public ActRuCaseExecution as(Name alias) {
        return new ActRuCaseExecution(alias, this);
    }

    @Override
    public ActRuCaseExecution as(Table<?> alias) {
        return new ActRuCaseExecution(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuCaseExecution rename(String name) {
        return new ActRuCaseExecution(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuCaseExecution rename(Name name) {
        return new ActRuCaseExecution(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuCaseExecution rename(Table<?> name) {
        return new ActRuCaseExecution(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<String, Integer, String, String, String, String, String, String, String, Integer, Integer, Boolean, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function13<? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super Integer, ? super Boolean, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function13<? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super Integer, ? super Boolean, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
