/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tito.jooq.Greygold;
import ru.tito.jooq.Indexes;
import ru.tito.jooq.tables.records.GenseqRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Genseq extends TableImpl<GenseqRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>greygold.genseq</code>
     */
    public static final Genseq GENSEQ = new Genseq();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GenseqRecord> getRecordType() {
        return GenseqRecord.class;
    }

    /**
     * The column <code>greygold.genseq.id</code>.
     */
    public final TableField<GenseqRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>greygold.genseq.name</code>.
     */
    public final TableField<GenseqRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    private Genseq(Name alias, Table<GenseqRecord> aliased) {
        this(alias, aliased, null);
    }

    private Genseq(Name alias, Table<GenseqRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>greygold.genseq</code> table reference
     */
    public Genseq(String alias) {
        this(DSL.name(alias), GENSEQ);
    }

    /**
     * Create an aliased <code>greygold.genseq</code> table reference
     */
    public Genseq(Name alias) {
        this(alias, GENSEQ);
    }

    /**
     * Create a <code>greygold.genseq</code> table reference
     */
    public Genseq() {
        this(DSL.name("genseq"), null);
    }

    public <O extends Record> Genseq(Table<O> child, ForeignKey<O, GenseqRecord> key) {
        super(child, key, GENSEQ);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Greygold.GREYGOLD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.INDGENSEQ);
    }

    @Override
    public Identity<GenseqRecord, Integer> getIdentity() {
        return (Identity<GenseqRecord, Integer>) super.getIdentity();
    }

    @Override
    public Genseq as(String alias) {
        return new Genseq(DSL.name(alias), this);
    }

    @Override
    public Genseq as(Name alias) {
        return new Genseq(alias, this);
    }

    @Override
    public Genseq as(Table<?> alias) {
        return new Genseq(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Genseq rename(String name) {
        return new Genseq(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Genseq rename(Name name) {
        return new Genseq(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Genseq rename(Table<?> name) {
        return new Genseq(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
