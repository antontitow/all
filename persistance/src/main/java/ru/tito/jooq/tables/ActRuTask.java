/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function22;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row22;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tito.jooq.Greygold;
import ru.tito.jooq.Indexes;
import ru.tito.jooq.Keys;
import ru.tito.jooq.tables.records.ActRuTaskRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActRuTask extends TableImpl<ActRuTaskRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>greygold.act_ru_task</code>
     */
    public static final ActRuTask ACT_RU_TASK = new ActRuTask();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActRuTaskRecord> getRecordType() {
        return ActRuTaskRecord.class;
    }

    /**
     * The column <code>greygold.act_ru_task.id_</code>.
     */
    public final TableField<ActRuTaskRecord, String> ID_ = createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_ru_task.rev_</code>.
     */
    public final TableField<ActRuTaskRecord, Integer> REV_ = createField(DSL.name("rev_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_ru_task.execution_id_</code>.
     */
    public final TableField<ActRuTaskRecord, String> EXECUTION_ID_ = createField(DSL.name("execution_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_task.proc_inst_id_</code>.
     */
    public final TableField<ActRuTaskRecord, String> PROC_INST_ID_ = createField(DSL.name("proc_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_task.proc_def_id_</code>.
     */
    public final TableField<ActRuTaskRecord, String> PROC_DEF_ID_ = createField(DSL.name("proc_def_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_task.case_execution_id_</code>.
     */
    public final TableField<ActRuTaskRecord, String> CASE_EXECUTION_ID_ = createField(DSL.name("case_execution_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_task.case_inst_id_</code>.
     */
    public final TableField<ActRuTaskRecord, String> CASE_INST_ID_ = createField(DSL.name("case_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_task.case_def_id_</code>.
     */
    public final TableField<ActRuTaskRecord, String> CASE_DEF_ID_ = createField(DSL.name("case_def_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_task.name_</code>.
     */
    public final TableField<ActRuTaskRecord, String> NAME_ = createField(DSL.name("name_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_ru_task.parent_task_id_</code>.
     */
    public final TableField<ActRuTaskRecord, String> PARENT_TASK_ID_ = createField(DSL.name("parent_task_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_task.description_</code>.
     */
    public final TableField<ActRuTaskRecord, String> DESCRIPTION_ = createField(DSL.name("description_"), SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>greygold.act_ru_task.task_def_key_</code>.
     */
    public final TableField<ActRuTaskRecord, String> TASK_DEF_KEY_ = createField(DSL.name("task_def_key_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_ru_task.owner_</code>.
     */
    public final TableField<ActRuTaskRecord, String> OWNER_ = createField(DSL.name("owner_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_ru_task.assignee_</code>.
     */
    public final TableField<ActRuTaskRecord, String> ASSIGNEE_ = createField(DSL.name("assignee_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_ru_task.delegation_</code>.
     */
    public final TableField<ActRuTaskRecord, String> DELEGATION_ = createField(DSL.name("delegation_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_ru_task.priority_</code>.
     */
    public final TableField<ActRuTaskRecord, Integer> PRIORITY_ = createField(DSL.name("priority_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_ru_task.create_time_</code>.
     */
    public final TableField<ActRuTaskRecord, LocalDateTime> CREATE_TIME_ = createField(DSL.name("create_time_"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>greygold.act_ru_task.last_updated_</code>.
     */
    public final TableField<ActRuTaskRecord, LocalDateTime> LAST_UPDATED_ = createField(DSL.name("last_updated_"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>greygold.act_ru_task.due_date_</code>.
     */
    public final TableField<ActRuTaskRecord, LocalDateTime> DUE_DATE_ = createField(DSL.name("due_date_"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>greygold.act_ru_task.follow_up_date_</code>.
     */
    public final TableField<ActRuTaskRecord, LocalDateTime> FOLLOW_UP_DATE_ = createField(DSL.name("follow_up_date_"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>greygold.act_ru_task.suspension_state_</code>.
     */
    public final TableField<ActRuTaskRecord, Integer> SUSPENSION_STATE_ = createField(DSL.name("suspension_state_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_ru_task.tenant_id_</code>.
     */
    public final TableField<ActRuTaskRecord, String> TENANT_ID_ = createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "");

    private ActRuTask(Name alias, Table<ActRuTaskRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActRuTask(Name alias, Table<ActRuTaskRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>greygold.act_ru_task</code> table reference
     */
    public ActRuTask(String alias) {
        this(DSL.name(alias), ACT_RU_TASK);
    }

    /**
     * Create an aliased <code>greygold.act_ru_task</code> table reference
     */
    public ActRuTask(Name alias) {
        this(alias, ACT_RU_TASK);
    }

    /**
     * Create a <code>greygold.act_ru_task</code> table reference
     */
    public ActRuTask() {
        this(DSL.name("act_ru_task"), null);
    }

    public <O extends Record> ActRuTask(Table<O> child, ForeignKey<O, ActRuTaskRecord> key) {
        super(child, key, ACT_RU_TASK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Greygold.GREYGOLD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACT_IDX_TASK_ASSIGNEE, Indexes.ACT_IDX_TASK_CASE_DEF_ID, Indexes.ACT_IDX_TASK_CASE_EXEC, Indexes.ACT_IDX_TASK_CREATE, Indexes.ACT_IDX_TASK_EXEC, Indexes.ACT_IDX_TASK_LAST_UPDATED, Indexes.ACT_IDX_TASK_OWNER, Indexes.ACT_IDX_TASK_PROCDEF, Indexes.ACT_IDX_TASK_PROCINST, Indexes.ACT_IDX_TASK_TENANT_ID);
    }

    @Override
    public UniqueKey<ActRuTaskRecord> getPrimaryKey() {
        return Keys.ACT_RU_TASK_PKEY;
    }

    @Override
    public List<ForeignKey<ActRuTaskRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACT_RU_TASK__ACT_FK_TASK_EXE, Keys.ACT_RU_TASK__ACT_FK_TASK_PROCINST, Keys.ACT_RU_TASK__ACT_FK_TASK_PROCDEF, Keys.ACT_RU_TASK__ACT_FK_TASK_CASE_EXE, Keys.ACT_RU_TASK__ACT_FK_TASK_CASE_DEF);
    }

    private transient ActRuExecution _actFkTaskExe;
    private transient ActRuExecution _actFkTaskProcinst;
    private transient ActReProcdef _actReProcdef;
    private transient ActRuCaseExecution _actRuCaseExecution;
    private transient ActReCaseDef _actReCaseDef;

    /**
     * Get the implicit join path to the <code>greygold.act_ru_execution</code>
     * table, via the <code>act_fk_task_exe</code> key.
     */
    public ActRuExecution actFkTaskExe() {
        if (_actFkTaskExe == null)
            _actFkTaskExe = new ActRuExecution(this, Keys.ACT_RU_TASK__ACT_FK_TASK_EXE);

        return _actFkTaskExe;
    }

    /**
     * Get the implicit join path to the <code>greygold.act_ru_execution</code>
     * table, via the <code>act_fk_task_procinst</code> key.
     */
    public ActRuExecution actFkTaskProcinst() {
        if (_actFkTaskProcinst == null)
            _actFkTaskProcinst = new ActRuExecution(this, Keys.ACT_RU_TASK__ACT_FK_TASK_PROCINST);

        return _actFkTaskProcinst;
    }

    /**
     * Get the implicit join path to the <code>greygold.act_re_procdef</code>
     * table.
     */
    public ActReProcdef actReProcdef() {
        if (_actReProcdef == null)
            _actReProcdef = new ActReProcdef(this, Keys.ACT_RU_TASK__ACT_FK_TASK_PROCDEF);

        return _actReProcdef;
    }

    /**
     * Get the implicit join path to the
     * <code>greygold.act_ru_case_execution</code> table.
     */
    public ActRuCaseExecution actRuCaseExecution() {
        if (_actRuCaseExecution == null)
            _actRuCaseExecution = new ActRuCaseExecution(this, Keys.ACT_RU_TASK__ACT_FK_TASK_CASE_EXE);

        return _actRuCaseExecution;
    }

    /**
     * Get the implicit join path to the <code>greygold.act_re_case_def</code>
     * table.
     */
    public ActReCaseDef actReCaseDef() {
        if (_actReCaseDef == null)
            _actReCaseDef = new ActReCaseDef(this, Keys.ACT_RU_TASK__ACT_FK_TASK_CASE_DEF);

        return _actReCaseDef;
    }

    @Override
    public ActRuTask as(String alias) {
        return new ActRuTask(DSL.name(alias), this);
    }

    @Override
    public ActRuTask as(Name alias) {
        return new ActRuTask(alias, this);
    }

    @Override
    public ActRuTask as(Table<?> alias) {
        return new ActRuTask(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuTask rename(String name) {
        return new ActRuTask(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuTask rename(Name name) {
        return new ActRuTask(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActRuTask rename(Table<?> name) {
        return new ActRuTask(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row22 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row22<String, Integer, String, String, String, String, String, String, String, String, String, String, String, String, String, Integer, LocalDateTime, LocalDateTime, LocalDateTime, LocalDateTime, Integer, String> fieldsRow() {
        return (Row22) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function22<? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function22<? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
