/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function21;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tito.jooq.Greygold;
import ru.tito.jooq.Indexes;
import ru.tito.jooq.Keys;
import ru.tito.jooq.tables.records.ActHiIncidentRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActHiIncident extends TableImpl<ActHiIncidentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>greygold.act_hi_incident</code>
     */
    public static final ActHiIncident ACT_HI_INCIDENT = new ActHiIncident();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActHiIncidentRecord> getRecordType() {
        return ActHiIncidentRecord.class;
    }

    /**
     * The column <code>greygold.act_hi_incident.id_</code>.
     */
    public final TableField<ActHiIncidentRecord, String> ID_ = createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_incident.proc_def_key_</code>.
     */
    public final TableField<ActHiIncidentRecord, String> PROC_DEF_KEY_ = createField(DSL.name("proc_def_key_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_incident.proc_def_id_</code>.
     */
    public final TableField<ActHiIncidentRecord, String> PROC_DEF_ID_ = createField(DSL.name("proc_def_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_incident.root_proc_inst_id_</code>.
     */
    public final TableField<ActHiIncidentRecord, String> ROOT_PROC_INST_ID_ = createField(DSL.name("root_proc_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_incident.proc_inst_id_</code>.
     */
    public final TableField<ActHiIncidentRecord, String> PROC_INST_ID_ = createField(DSL.name("proc_inst_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_incident.execution_id_</code>.
     */
    public final TableField<ActHiIncidentRecord, String> EXECUTION_ID_ = createField(DSL.name("execution_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_incident.create_time_</code>.
     */
    public final TableField<ActHiIncidentRecord, LocalDateTime> CREATE_TIME_ = createField(DSL.name("create_time_"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_incident.end_time_</code>.
     */
    public final TableField<ActHiIncidentRecord, LocalDateTime> END_TIME_ = createField(DSL.name("end_time_"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>greygold.act_hi_incident.incident_msg_</code>.
     */
    public final TableField<ActHiIncidentRecord, String> INCIDENT_MSG_ = createField(DSL.name("incident_msg_"), SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>greygold.act_hi_incident.incident_type_</code>.
     */
    public final TableField<ActHiIncidentRecord, String> INCIDENT_TYPE_ = createField(DSL.name("incident_type_"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_incident.activity_id_</code>.
     */
    public final TableField<ActHiIncidentRecord, String> ACTIVITY_ID_ = createField(DSL.name("activity_id_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_incident.failed_activity_id_</code>.
     */
    public final TableField<ActHiIncidentRecord, String> FAILED_ACTIVITY_ID_ = createField(DSL.name("failed_activity_id_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_incident.cause_incident_id_</code>.
     */
    public final TableField<ActHiIncidentRecord, String> CAUSE_INCIDENT_ID_ = createField(DSL.name("cause_incident_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_incident.root_cause_incident_id_</code>.
     */
    public final TableField<ActHiIncidentRecord, String> ROOT_CAUSE_INCIDENT_ID_ = createField(DSL.name("root_cause_incident_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_incident.configuration_</code>.
     */
    public final TableField<ActHiIncidentRecord, String> CONFIGURATION_ = createField(DSL.name("configuration_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_incident.history_configuration_</code>.
     */
    public final TableField<ActHiIncidentRecord, String> HISTORY_CONFIGURATION_ = createField(DSL.name("history_configuration_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_incident.incident_state_</code>.
     */
    public final TableField<ActHiIncidentRecord, Integer> INCIDENT_STATE_ = createField(DSL.name("incident_state_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_hi_incident.tenant_id_</code>.
     */
    public final TableField<ActHiIncidentRecord, String> TENANT_ID_ = createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_incident.job_def_id_</code>.
     */
    public final TableField<ActHiIncidentRecord, String> JOB_DEF_ID_ = createField(DSL.name("job_def_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_incident.annotation_</code>.
     */
    public final TableField<ActHiIncidentRecord, String> ANNOTATION_ = createField(DSL.name("annotation_"), SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>greygold.act_hi_incident.removal_time_</code>.
     */
    public final TableField<ActHiIncidentRecord, LocalDateTime> REMOVAL_TIME_ = createField(DSL.name("removal_time_"), SQLDataType.LOCALDATETIME(6), this, "");

    private ActHiIncident(Name alias, Table<ActHiIncidentRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActHiIncident(Name alias, Table<ActHiIncidentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>greygold.act_hi_incident</code> table reference
     */
    public ActHiIncident(String alias) {
        this(DSL.name(alias), ACT_HI_INCIDENT);
    }

    /**
     * Create an aliased <code>greygold.act_hi_incident</code> table reference
     */
    public ActHiIncident(Name alias) {
        this(alias, ACT_HI_INCIDENT);
    }

    /**
     * Create a <code>greygold.act_hi_incident</code> table reference
     */
    public ActHiIncident() {
        this(DSL.name("act_hi_incident"), null);
    }

    public <O extends Record> ActHiIncident(Table<O> child, ForeignKey<O, ActHiIncidentRecord> key) {
        super(child, key, ACT_HI_INCIDENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Greygold.GREYGOLD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACT_IDX_HI_INCIDENT_CREATE_TIME, Indexes.ACT_IDX_HI_INCIDENT_END_TIME, Indexes.ACT_IDX_HI_INCIDENT_PROC_DEF_KEY, Indexes.ACT_IDX_HI_INCIDENT_PROCINST, Indexes.ACT_IDX_HI_INCIDENT_RM_TIME, Indexes.ACT_IDX_HI_INCIDENT_ROOT_PI, Indexes.ACT_IDX_HI_INCIDENT_TENANT_ID);
    }

    @Override
    public UniqueKey<ActHiIncidentRecord> getPrimaryKey() {
        return Keys.ACT_HI_INCIDENT_PKEY;
    }

    @Override
    public ActHiIncident as(String alias) {
        return new ActHiIncident(DSL.name(alias), this);
    }

    @Override
    public ActHiIncident as(Name alias) {
        return new ActHiIncident(alias, this);
    }

    @Override
    public ActHiIncident as(Table<?> alias) {
        return new ActHiIncident(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiIncident rename(String name) {
        return new ActHiIncident(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiIncident rename(Name name) {
        return new ActHiIncident(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiIncident rename(Table<?> name) {
        return new ActHiIncident(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<String, String, String, String, String, String, LocalDateTime, LocalDateTime, String, String, String, String, String, String, String, String, Integer, String, String, String, LocalDateTime> fieldsRow() {
        return (Row21) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function21<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function21<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
