/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tito.jooq.Greygold;
import ru.tito.jooq.Indexes;
import ru.tito.jooq.Keys;
import ru.tito.jooq.tables.records.ActHiCaseinstRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActHiCaseinst extends TableImpl<ActHiCaseinstRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>greygold.act_hi_caseinst</code>
     */
    public static final ActHiCaseinst ACT_HI_CASEINST = new ActHiCaseinst();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActHiCaseinstRecord> getRecordType() {
        return ActHiCaseinstRecord.class;
    }

    /**
     * The column <code>greygold.act_hi_caseinst.id_</code>.
     */
    public final TableField<ActHiCaseinstRecord, String> ID_ = createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_caseinst.case_inst_id_</code>.
     */
    public final TableField<ActHiCaseinstRecord, String> CASE_INST_ID_ = createField(DSL.name("case_inst_id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_caseinst.business_key_</code>.
     */
    public final TableField<ActHiCaseinstRecord, String> BUSINESS_KEY_ = createField(DSL.name("business_key_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_caseinst.case_def_id_</code>.
     */
    public final TableField<ActHiCaseinstRecord, String> CASE_DEF_ID_ = createField(DSL.name("case_def_id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_caseinst.create_time_</code>.
     */
    public final TableField<ActHiCaseinstRecord, LocalDateTime> CREATE_TIME_ = createField(DSL.name("create_time_"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>greygold.act_hi_caseinst.close_time_</code>.
     */
    public final TableField<ActHiCaseinstRecord, LocalDateTime> CLOSE_TIME_ = createField(DSL.name("close_time_"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>greygold.act_hi_caseinst.duration_</code>.
     */
    public final TableField<ActHiCaseinstRecord, Long> DURATION_ = createField(DSL.name("duration_"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>greygold.act_hi_caseinst.state_</code>.
     */
    public final TableField<ActHiCaseinstRecord, Integer> STATE_ = createField(DSL.name("state_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_hi_caseinst.create_user_id_</code>.
     */
    public final TableField<ActHiCaseinstRecord, String> CREATE_USER_ID_ = createField(DSL.name("create_user_id_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_hi_caseinst.super_case_instance_id_</code>.
     */
    public final TableField<ActHiCaseinstRecord, String> SUPER_CASE_INSTANCE_ID_ = createField(DSL.name("super_case_instance_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column
     * <code>greygold.act_hi_caseinst.super_process_instance_id_</code>.
     */
    public final TableField<ActHiCaseinstRecord, String> SUPER_PROCESS_INSTANCE_ID_ = createField(DSL.name("super_process_instance_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_hi_caseinst.tenant_id_</code>.
     */
    public final TableField<ActHiCaseinstRecord, String> TENANT_ID_ = createField(DSL.name("tenant_id_"), SQLDataType.VARCHAR(64), this, "");

    private ActHiCaseinst(Name alias, Table<ActHiCaseinstRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActHiCaseinst(Name alias, Table<ActHiCaseinstRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>greygold.act_hi_caseinst</code> table reference
     */
    public ActHiCaseinst(String alias) {
        this(DSL.name(alias), ACT_HI_CASEINST);
    }

    /**
     * Create an aliased <code>greygold.act_hi_caseinst</code> table reference
     */
    public ActHiCaseinst(Name alias) {
        this(alias, ACT_HI_CASEINST);
    }

    /**
     * Create a <code>greygold.act_hi_caseinst</code> table reference
     */
    public ActHiCaseinst() {
        this(DSL.name("act_hi_caseinst"), null);
    }

    public <O extends Record> ActHiCaseinst(Table<O> child, ForeignKey<O, ActHiCaseinstRecord> key) {
        super(child, key, ACT_HI_CASEINST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Greygold.GREYGOLD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACT_IDX_HI_CAS_I_BUSKEY, Indexes.ACT_IDX_HI_CAS_I_CLOSE, Indexes.ACT_IDX_HI_CAS_I_TENANT_ID);
    }

    @Override
    public UniqueKey<ActHiCaseinstRecord> getPrimaryKey() {
        return Keys.ACT_HI_CASEINST_PKEY;
    }

    @Override
    public List<UniqueKey<ActHiCaseinstRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ACT_HI_CASEINST_CASE_INST_ID__KEY);
    }

    @Override
    public ActHiCaseinst as(String alias) {
        return new ActHiCaseinst(DSL.name(alias), this);
    }

    @Override
    public ActHiCaseinst as(Name alias) {
        return new ActHiCaseinst(alias, this);
    }

    @Override
    public ActHiCaseinst as(Table<?> alias) {
        return new ActHiCaseinst(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiCaseinst rename(String name) {
        return new ActHiCaseinst(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiCaseinst rename(Name name) {
        return new ActHiCaseinst(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActHiCaseinst rename(Table<?> name) {
        return new ActHiCaseinst(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, String, String, String, LocalDateTime, LocalDateTime, Long, Integer, String, String, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super Long, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super Long, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
