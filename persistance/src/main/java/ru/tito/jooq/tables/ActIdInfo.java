/*
 * This file is generated by jOOQ.
 */
package ru.tito.jooq.tables;


import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tito.jooq.Greygold;
import ru.tito.jooq.Keys;
import ru.tito.jooq.tables.records.ActIdInfoRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActIdInfo extends TableImpl<ActIdInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>greygold.act_id_info</code>
     */
    public static final ActIdInfo ACT_ID_INFO = new ActIdInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActIdInfoRecord> getRecordType() {
        return ActIdInfoRecord.class;
    }

    /**
     * The column <code>greygold.act_id_info.id_</code>.
     */
    public final TableField<ActIdInfoRecord, String> ID_ = createField(DSL.name("id_"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>greygold.act_id_info.rev_</code>.
     */
    public final TableField<ActIdInfoRecord, Integer> REV_ = createField(DSL.name("rev_"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>greygold.act_id_info.user_id_</code>.
     */
    public final TableField<ActIdInfoRecord, String> USER_ID_ = createField(DSL.name("user_id_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_id_info.type_</code>.
     */
    public final TableField<ActIdInfoRecord, String> TYPE_ = createField(DSL.name("type_"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>greygold.act_id_info.key_</code>.
     */
    public final TableField<ActIdInfoRecord, String> KEY_ = createField(DSL.name("key_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_id_info.value_</code>.
     */
    public final TableField<ActIdInfoRecord, String> VALUE_ = createField(DSL.name("value_"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>greygold.act_id_info.password_</code>.
     */
    public final TableField<ActIdInfoRecord, byte[]> PASSWORD_ = createField(DSL.name("password_"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>greygold.act_id_info.parent_id_</code>.
     */
    public final TableField<ActIdInfoRecord, String> PARENT_ID_ = createField(DSL.name("parent_id_"), SQLDataType.VARCHAR(255), this, "");

    private ActIdInfo(Name alias, Table<ActIdInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActIdInfo(Name alias, Table<ActIdInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>greygold.act_id_info</code> table reference
     */
    public ActIdInfo(String alias) {
        this(DSL.name(alias), ACT_ID_INFO);
    }

    /**
     * Create an aliased <code>greygold.act_id_info</code> table reference
     */
    public ActIdInfo(Name alias) {
        this(alias, ACT_ID_INFO);
    }

    /**
     * Create a <code>greygold.act_id_info</code> table reference
     */
    public ActIdInfo() {
        this(DSL.name("act_id_info"), null);
    }

    public <O extends Record> ActIdInfo(Table<O> child, ForeignKey<O, ActIdInfoRecord> key) {
        super(child, key, ACT_ID_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Greygold.GREYGOLD;
    }

    @Override
    public UniqueKey<ActIdInfoRecord> getPrimaryKey() {
        return Keys.ACT_ID_INFO_PKEY;
    }

    @Override
    public ActIdInfo as(String alias) {
        return new ActIdInfo(DSL.name(alias), this);
    }

    @Override
    public ActIdInfo as(Name alias) {
        return new ActIdInfo(alias, this);
    }

    @Override
    public ActIdInfo as(Table<?> alias) {
        return new ActIdInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActIdInfo rename(String name) {
        return new ActIdInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActIdInfo rename(Name name) {
        return new ActIdInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActIdInfo rename(Table<?> name) {
        return new ActIdInfo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, Integer, String, String, String, String, byte[], String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super byte[], ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super byte[], ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
